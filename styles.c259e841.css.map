{"version":3,"sources":["node_modules/@material/chips/_chip.scss","node_modules/@material/elevation/_elevation-theme.scss","node_modules/@material/theme/_css.scss","node_modules/@material/touch-target/_touch-target.scss","node_modules/@material/chips/_chip-theme.scss","node_modules/@material/rtl/_rtl.scss","node_modules/@material/typography/_typography.scss","node_modules/@material/dom/_dom.scss","node_modules/@material/focus-ring/_focus-ring.scss","node_modules/@material/ripple/_ripple-theme.scss","node_modules/@material/ripple/_ripple.scss","node_modules/@material/chips/_chip-set.scss","node_modules/@material/chips/_chip-set-theme.scss"],"names":[],"mappings":"AA4GE,0EAII,mBAAA,CACA,mBAIJ,oBAEI,iBAAA,CACA,eCgNJ,2CC1PE,UAAA,CAAA,WAAA,CDgQI,KAAA,CAEA,ODnNN,sDAGI,YAIJ,mCAEI,kBAIJ,oCAEI,cAIJ,4BAEI,kBAAA,CACA,eAAA,CACA,WAAA,CACA,sBAAA,CACA,cAAA,CACA,mBAAA,CACA,sBAAA,CACA,YAAA,CACA,SAAA,CACA,oBAAA,CAIA,cAIJ,4CAEI,YAIJ,mEAGI,oBAIJ,qCAEI,kBAIJ,sCAEI,iBAAA,CACA,iBAIJ,4CAEI,qBAAA,CACA,UAAA,CACA,WAAA,CACA,MAAA,CACA,iBAAA,CACA,mBAAA,CACA,KAAA,CACA,UAAA,CACA,UAIJ,2BGtGE,cAHsB,CAItB,kBH4GF,kCGhJE,iBAAA,CACA,OAAA,CACA,WAtCK,CAkDH,MAAA,CACA,OAAA,CACA,2BHoIJ,gCAEI,kBAAA,CACA,gBAAA,CACA,sBAAA,CACA,gBAIJ,6BAEI,kBAAA,CACA,mBAAA,CACA,sBAAA,CACA,eAAA,CACA,mBAAA,CACA,iBAAA,CACA,cAIJ,+BAEI,iBAAA,CACA,SAAA,CACA,OAAA,CAEA,SAKF,4IAEI,QAKN,0CAEI,UAIJ,mCAEI,cAIJ,oCAEI,gBAAA,CACA,2BAAA,CACA,4BAAA,CAIA,oBAKF,4DAEI,kDAIJ,8DAEI,qDAAA,CACA,+BAIJ,mEAEI,+DAMJ,8DAEI,iDAIJ,gEAEI,4EAAA,CAEA,+BAIJ,qEAGI,oBAMJ,oFAEI,oDAIJ,qFAEI,+DAMJ,sFAEI,qDAIJ,kFAEI,mDAAA,CAEA,+BAIJ,uFAGI,oBAMJ,iEAEI,UAIJ,6DAEI,8BAAA,CACA,UAIJ,kEAEI,oBAMJ,oCACE,GACE,mBAAA,CACA,WAGF,GACE,kBAAA,CACA,WAKN,2BAEI,kEAKF,mCACE,GACE,UAGF,GACE,WAKN,0BAEI,kEAIJ,4BAEI,SAAA,CACA,mBAAA,CACA,iDAwFJ,oBE/aE,WAAA,CAAA,kBAAA,CAAA,yBEikBF,uKFjkBE,mBGEE,8LHFF,iBAAA,CAAA,mBGEE,iSHFF,gBAAA,CAAA,kBEstCA,kGFttCA,cAAA,CAAA,mBGEE,uNHFF,iBAAA,CAAA,gBGEE,4THFF,gBAAA,CAAA,kBEuvCA,mGFvvCA,QAAA,CAAA,WGEE,yNHFF,SAAA,CAAA,UE6vCA,kGF7vCA,iBAAA,CAAA,gBGEE,uNHFF,cAAA,CAAA,mBGEE,4ZHFF,gBAAA,CAAA,kBGEE,ubHFF,gBAAA,CAAA,kBEyyCA,4IFzyCA,QAAA,CAAA,WGEE,2SHFF,SAAA,CAAA,UGEE,obHFF,cAAA,CAAA,gBE2jCF,sNF3jCE,sBEw1BF,oDE9lBE,iCAAA,CACA,kCAAA,CJvQE,6BAAA,CAYF,uGAAA,CAZE,iBAAA,CAYF,uDAAA,CAZE,mBAAA,CAYF,2DAAA,CAZE,eAAA,CAYF,uDAAA,CAZE,4BAAA,CAYF,uEAAA,CAZE,uBAAA,CAYF,mEAAA,CAZE,sBAAA,CAYF,kEE02BF,+FF12BE,uCE8+BF,wGF9+BE,WAAA,CAAA,UAAA,CAAA,eE2kCF,mDF3kCE,WAAA,CAAA,WE8/BF,wDF9/BE,WAAA,CAAA,UAAA,CAAA,eKoBA,oEHyoBF,gEF7pBE,wBE6pBF,6FF7pBE,sBE6pBF,6FF7pBE,wBE6pBF,0HF7pBE,sBE2jCF,0UF3jCE,gBFiZF,oDACE,aAKE,4VACE,SAAA,CACA,aAAA,CQjaJ,mBAAA,CACA,4BAAA,CACA,iBAAA,CACA,sBAAA,CACA,iBAAA,CACA,OAAA,CAEA,QAAA,CAEA,8BAAA,CACA,uBAzB0B,CA0B1B,uBDaA,yCPuYE,4VQjZA,yBAGF,wWACE,UAAA,CACA,4BAAA,CACA,iBAhEgB,CAiEhB,aAAA,CACA,iBAAA,CACA,OAAA,CAEA,QAAA,CAEA,8BAAA,CACA,uBA/BgB,CAgChB,uBDLF,yCCPA,wWAeI,yBRyYF,8VACE,SAAA,CACA,aAAA,CQ3aJ,mBAAA,CACA,4BAAA,CACA,iBAAA,CACA,sBAAA,CACA,iBAAA,CACA,OAAA,CAEA,QAAA,CAEA,8BAAA,CACA,uBAzB0B,CA0B1B,uBDaA,yCPiZE,8VQ3ZA,yBAGF,0WACE,UAAA,CACA,4BAAA,CACA,iBAhEgB,CAiEhB,aAAA,CACA,iBAAA,CACA,OAAA,CAEA,QAAA,CAEA,8BAAA,CACA,uBA/BgB,CAgChB,uBDLF,yCCPA,0WAeI,yBJ42CN,yDFp4CE,yBE4sCA,uGF5sCA,gBAAA,CAAA,kBGEE,iOHFF,gBAAA,CAAA,kBEstCA,+GFttCA,cAAA,CAAA,mBGEE,iPHFF,iBAAA,CAAA,gBEqxCA,gJFrxCA,gBAAA,CAAA,kBGEE,mTHFF,gBAAA,CAAA,kBGEE,8dHFF,gBAAA,CAAA,kBEyyCA,yJFzyCA,QAAA,CAAA,WGEE,qUHFF,SAAA,CAAA,UGEE,2dHFF,cAAA,CAAA,gBE02BF,4GF12BE,uCE8+BF,kIF9+BE,WAAA,CAAA,UAAA,CAAA,eO4EA,+IPxFE,qBAAA,CAYF,0EOqdF,gLPjeI,WAAA,CAYF,4COqdF,wNA9QI,wBAAA,CPnNA,WAAA,CAYF,4COiOE,iGAEI,+BAKF,wGAEI,wBAhRO,CP0Bb,WAAA,CAYF,4COqPA,yDPrPA,6DO4EA,iJPxFE,qBAAA,CAYF,0EOqdF,kLPjeI,WAAA,CAYF,4COqdF,0NA9QI,wBAAA,CPnNA,WAAA,CAYF,4COiOE,kGAEI,+BAKF,yGAEI,wBAhRO,CP0Bb,WAAA,CAYF,4COqPA,0DPrPA,6DE8cF,sCF9cE,WAAA,CAAA,WFjBF,4BUqDE,sBAAA,CACA,mBAAA,CACA,kBAAA,CACA,uBAAA,CACA,+BAAA,CACA,iCAAA,CAEA,0CAOF,6HAGI,iBAAA,CACA,iBAAA,CACA,SAAA,CACA,mBAAA,CACA,WAIJ,+DAGI,2DAAA,CR5EA,SAAA,CAYF,oCQ6EF,8DRzFI,SAAA,CAYF,oCQyFA,mFAEI,8CAIJ,kFAEI,KAAA,CAEA,MAAA,CACA,kBAAA,CACA,+BAMJ,6FAEI,2BAAA,CAEA,8BAMJ,yGAEI,wFAQJ,2GAEI,wCAAA,CAKA,8FAcN,6HAGI,QAAA,CAEA,SAAA,CACA,UAAA,CACA,YAKF,kFAEI,oCAAA,CACA,sCVvKN,4BAEI,iBAAA,CAGA,sBAAA,CACA,eAAA,CACA,oBAIJ,qCAEI,WAAA,CACA,UAAA,CACA,KAAA,CAEA,OAIJ,sCAEI,OAAA,CACA,2BW7DJ,wBAEI,aAIJ,8BAEI,aAIJ,+BAEI,YAAA,CACA,cAAA,CACA,YAIJ,iEAEI,iBClBJ,uDVqCE,gBAAA,CAAA,eGEE,iIHFF,aAAA,CAAA,kBU7BF,4CV6BE,eAAA,CAAA,eGEE,2GHFF,aAAA,CAAA,iBUXF,4CAII,cAAA,CACA","file":"styles.c259e841.css","sourceRoot":"..","sourcesContent":["//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// Selector '.mdc-*' should only be used in this project.\n// stylelint-disable selector-class-pattern --\n// Internal styling for Chip MDC component.\n\n@use '@material/animation/animation';\n@use '@material/dom/dom';\n@use '@material/elevation/elevation-theme';\n@use '@material/focus-ring/focus-ring';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/ripple/ripple';\n@use '@material/ripple/ripple-theme';\n@use '@material/rtl/rtl';\n@use '@material/theme/theme-color';\n@use '@material/touch-target/touch-target';\n@use './chip-theme';\n\n@mixin core-styles($query: feature-targeting.all()) {\n  @include without-ripple-styles($query);\n  @include ripple-styles($query);\n}\n\n@mixin without-ripple-styles($query: feature-targeting.all()) {\n  @include static-styles($query);\n  @include _theme-styles($query);\n}\n\n@mixin ripple-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include chip-theme.ripple-color(chip-theme.$ripple-color, $query: $query);\n  @include chip-theme.trailing-action-ripple-color(\n    chip-theme.$ripple-color,\n    $query: $query\n  );\n  @include chip-theme.trailing-action-ripple-size(\n    chip-theme.$trailing-action-size,\n    $query: $query\n  );\n\n  .mdc-evolution-chip__action {\n    @include ripple.surface(\n      $query: $query,\n      $ripple-target: chip-theme.$ripple-target,\n      $include-will-change: false\n    );\n\n    @include ripple.radius-bounded(\n      $query: $query,\n      $ripple-target: chip-theme.$ripple-target\n    );\n  }\n\n  #{chip-theme.$ripple-target} {\n    @include feature-targeting.targets($feat-structure) {\n      position: absolute;\n      // Ripple needs content-box as the box sizing and box-sizing: border-box\n      // is often set as a default, so we override that here.\n      box-sizing: content-box;\n      overflow: hidden;\n      pointer-events: none;\n    }\n  }\n\n  #{chip-theme.$ripple-target-primary} {\n    @include feature-targeting.targets($feat-structure) {\n      height: 100%;\n      width: 100%;\n      top: 0;\n      @include rtl.ignore-next-line();\n      left: 0;\n    }\n  }\n\n  #{chip-theme.$ripple-target-trailing} {\n    @include feature-targeting.targets($feat-structure) {\n      top: 50%;\n      transform: translateY(-50%);\n    }\n  }\n}\n\n@mixin static-styles($query: feature-targeting.all()) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n  $feat-color: feature-targeting.create-target($query, color);\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-evolution-chip,\n  .mdc-evolution-chip__cell,\n  .mdc-evolution-chip__action {\n    @include feature-targeting.targets($feat-structure) {\n      display: inline-flex;\n      align-items: center;\n    }\n  }\n\n  .mdc-evolution-chip {\n    @include feature-targeting.targets($feat-structure) {\n      position: relative;\n      max-width: 100%;\n    }\n    @include elevation-theme.overlay-dimensions(100%, $query: $query);\n  }\n\n  .mdc-evolution-chip__cell,\n  .mdc-evolution-chip__action {\n    @include feature-targeting.targets($feat-structure) {\n      height: 100%;\n    }\n  }\n\n  .mdc-evolution-chip__cell--primary {\n    @include feature-targeting.targets($feat-structure) {\n      overflow-x: hidden;\n    }\n  }\n\n  .mdc-evolution-chip__cell--trailing {\n    @include feature-targeting.targets($feat-structure) {\n      flex: 1 0 auto;\n    }\n  }\n\n  .mdc-evolution-chip__action {\n    @include feature-targeting.targets($feat-structure) {\n      align-items: center;\n      background: none;\n      border: none;\n      box-sizing: content-box;\n      cursor: pointer;\n      display: inline-flex;\n      justify-content: center;\n      outline: none;\n      padding: 0;\n      text-decoration: none;\n    }\n\n    @include feature-targeting.targets($feat-color) {\n      color: inherit;\n    }\n  }\n\n  .mdc-evolution-chip__action--presentational {\n    @include feature-targeting.targets($feat-structure) {\n      cursor: auto;\n    }\n  }\n\n  .mdc-evolution-chip--disabled,\n  .mdc-evolution-chip__action:disabled {\n    @include feature-targeting.targets($feat-structure) {\n      pointer-events: none;\n    }\n  }\n\n  .mdc-evolution-chip__action--primary {\n    @include feature-targeting.targets($feat-structure) {\n      overflow-x: hidden;\n    }\n  }\n\n  .mdc-evolution-chip__action--trailing {\n    @include feature-targeting.targets($feat-structure) {\n      position: relative;\n      overflow: visible;\n    }\n  }\n\n  .mdc-evolution-chip__action--primary:before {\n    @include feature-targeting.targets($feat-structure) {\n      box-sizing: border-box;\n      content: '';\n      height: 100%;\n      left: 0;\n      position: absolute;\n      pointer-events: none;\n      top: 0;\n      width: 100%;\n      z-index: 1; // Position above touch target\n    }\n  }\n\n  .mdc-evolution-chip--touch {\n    @include touch-target.margin(\n      $component-height: chip-theme.$height,\n      $query: $query\n    );\n  }\n\n  .mdc-evolution-chip__action-touch {\n    @include touch-target.touch-target($query: $query);\n  }\n\n  .mdc-evolution-chip__text-label {\n    @include feature-targeting.targets($feat-structure) {\n      white-space: nowrap;\n      user-select: none;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  .mdc-evolution-chip__graphic {\n    @include feature-targeting.targets($feat-structure) {\n      align-items: center;\n      display: inline-flex;\n      justify-content: center;\n      overflow: hidden;\n      pointer-events: none;\n      position: relative;\n      flex: 1 0 auto;\n    }\n  }\n\n  .mdc-evolution-chip__checkmark {\n    @include feature-targeting.targets($feat-structure) {\n      position: absolute;\n      opacity: 0;\n      top: 50%;\n      @include rtl.ignore-next-line();\n      left: 50%;\n    }\n  }\n\n  .mdc-evolution-chip--selectable:not(.mdc-evolution-chip--selected) {\n    &:not(.mdc-evolution-chip--with-primary-icon) .mdc-evolution-chip__graphic {\n      @include feature-targeting.targets($feat-structure) {\n        width: 0;\n      }\n    }\n  }\n\n  .mdc-evolution-chip__checkmark-background {\n    @include feature-targeting.targets($feat-structure) {\n      opacity: 0;\n    }\n  }\n\n  .mdc-evolution-chip__checkmark-svg {\n    @include feature-targeting.targets($feat-structure) {\n      display: block;\n    }\n  }\n\n  .mdc-evolution-chip__checkmark-path {\n    @include feature-targeting.targets($feat-structure) {\n      stroke-width: 2px;\n      stroke-dasharray: 29.7833385;\n      stroke-dashoffset: 29.7833385;\n    }\n\n    @include feature-targeting.targets($feat-color) {\n      stroke: currentColor;\n    }\n  }\n\n  .mdc-evolution-chip--selecting {\n    .mdc-evolution-chip__graphic {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.standard(width, 150ms);\n      }\n    }\n\n    .mdc-evolution-chip__checkmark {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.standard(transform, 150ms);\n        transform: translate(-75%, -50%);\n      }\n    }\n\n    .mdc-evolution-chip__checkmark-path {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.standard(stroke-dashoffset, 150ms, $delay: 45ms);\n      }\n    }\n  }\n\n  .mdc-evolution-chip--deselecting {\n    .mdc-evolution-chip__graphic {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.standard(width, 100ms);\n      }\n    }\n\n    .mdc-evolution-chip__checkmark {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.linear(opacity, 50ms),\n          animation.standard(transform, 100ms);\n        transform: translate(-75%, -50%);\n      }\n    }\n\n    .mdc-evolution-chip__checkmark-path {\n      @include feature-targeting.targets($feat-animation) {\n        // Ensure the checkmark path stays visible\n        stroke-dashoffset: 0;\n      }\n    }\n  }\n\n  .mdc-evolution-chip--selecting-with-primary-icon {\n    .mdc-evolution-chip__icon--primary {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.standard(opacity, 75ms);\n      }\n    }\n\n    .mdc-evolution-chip__checkmark-path {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.standard(stroke-dashoffset, 150ms, $delay: 75ms);\n      }\n    }\n  }\n\n  .mdc-evolution-chip--deselecting-with-primary-icon {\n    .mdc-evolution-chip__icon--primary {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.standard(opacity, 150ms, $delay: 75ms);\n      }\n    }\n\n    .mdc-evolution-chip__checkmark {\n      @include feature-targeting.targets($feat-animation) {\n        transition: animation.standard(opacity, 75ms);\n        // Ensure the checkmark stays statically positioned\n        transform: translate(-50%, -50%);\n      }\n    }\n\n    .mdc-evolution-chip__checkmark-path {\n      @include feature-targeting.targets($feat-animation) {\n        // Ensure the checkmark path stays visible\n        stroke-dashoffset: 0;\n      }\n    }\n  }\n\n  .mdc-evolution-chip--selected {\n    .mdc-evolution-chip__icon--primary {\n      @include feature-targeting.targets($feat-structure) {\n        opacity: 0;\n      }\n    }\n\n    .mdc-evolution-chip__checkmark {\n      @include feature-targeting.targets($feat-structure) {\n        transform: translate(-50%, -50%);\n        opacity: 1;\n      }\n    }\n\n    .mdc-evolution-chip__checkmark-path {\n      @include feature-targeting.targets($feat-structure) {\n        stroke-dashoffset: 0;\n      }\n    }\n  }\n\n  @include feature-targeting.targets($feat-animation) {\n    @keyframes mdc-evolution-chip-enter {\n      from {\n        transform: scale(0.8);\n        opacity: 0.4;\n      }\n\n      to {\n        transform: scale(1);\n        opacity: 1;\n      }\n    }\n  }\n\n  .mdc-evolution-chip--enter {\n    @include feature-targeting.targets($feat-animation) {\n      animation: animation.enter(mdc-evolution-chip-enter, 100ms);\n    }\n  }\n\n  @include feature-targeting.targets($feat-animation) {\n    @keyframes mdc-evolution-chip-exit {\n      from {\n        opacity: 1;\n      }\n\n      to {\n        opacity: 0;\n      }\n    }\n  }\n\n  .mdc-evolution-chip--exit {\n    @include feature-targeting.targets($feat-animation) {\n      animation: animation.exit-permanent(mdc-evolution-chip-exit, 75ms);\n    }\n  }\n\n  .mdc-evolution-chip--hidden {\n    @include feature-targeting.targets($feat-animation) {\n      opacity: 0;\n      pointer-events: none;\n      transition: animation.exit-permanent(width, 150ms);\n    }\n  }\n}\n\n@mixin _high-contrast-mode($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include dom.forced-colors-mode {\n    @include chip-theme.outline-color(\n      (\n        default: CanvasText,\n        disabled: GrayText,\n      ),\n      $query: $query\n    );\n\n    @include chip-theme.selected-outline-color(\n      (\n        default: CanvasText,\n        disabled: GrayText,\n      ),\n      $query: $query\n    );\n\n    @include chip-theme.text-label-color(\n      (\n        disabled: GrayText,\n      ),\n      $query: $query\n    );\n\n    @include chip-theme.icon-color(\n      (\n        disabled: GrayText,\n      ),\n      $query: $query\n    );\n\n    @include chip-theme.checkmark-color(\n      (\n        disabled: GrayText,\n      ),\n      $query: $query\n    );\n\n    @include chip-theme.trailing-action-color(\n      (\n        disabled: GrayText,\n      ),\n      $query: $query\n    );\n  }\n\n  ///\n  /// Renders a transparent border on focus in Windows high-contrast mode.\n  ///\n\n  .mdc-evolution-chip__focus-ring {\n    display: none;\n  }\n\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational) {\n    @include ripple-theme.focus() {\n      .mdc-evolution-chip__focus-ring {\n        z-index: 1;\n        display: block;\n        @include focus-ring.focus-ring($query: $query);\n      }\n    }\n  }\n\n  .mdc-evolution-chip__action--trailing:not(.mdc-evolution-chip__action--presentational) {\n    @include ripple-theme.focus() {\n      .mdc-evolution-chip__focus-ring {\n        z-index: 1;\n        display: block;\n        @include focus-ring.focus-ring(\n          $container-outer-padding-vertical: 2px,\n          $container-outer-padding-horizontal: -2px,\n          $query: $query\n        );\n      }\n    }\n  }\n}\n\n@mixin _theme-styles($query: feature-targeting.all()) {\n  .mdc-evolution-chip {\n    @include chip-theme.height(chip-theme.$height, $query);\n    @include chip-theme.shape-radius(chip-theme.$radius, $query);\n    @include chip-theme.horizontal-padding(\n      chip-theme.$leading-padding,\n      chip-theme.$trailing-padding,\n      $query\n    );\n    @include chip-theme.with-graphic-horizontal-padding(\n      chip-theme.$graphic-leading-padding,\n      chip-theme.$graphic-trailing-padding,\n      chip-theme.$trailing-padding\n    );\n    @include chip-theme.with-trailing-action-horizontal-padding(\n      chip-theme.$leading-padding,\n      chip-theme.$trailing-action-leading-padding,\n      chip-theme.$trailing-action-trailing-padding,\n      $query\n    );\n    @include chip-theme.with-graphic-and-trailing-action-horizontal-padding(\n      chip-theme.$graphic-leading-padding,\n      chip-theme.$graphic-trailing-padding,\n      chip-theme.$trailing-action-leading-padding,\n      chip-theme.$trailing-action-trailing-padding,\n      $query\n    );\n    @include chip-theme.container-color(chip-theme.$container-color, $query);\n    @include chip-theme.text-label-color(chip-theme.$text-label-color, $query);\n    @include chip-theme.icon-color(chip-theme.$icon-color, $query);\n    @include chip-theme.checkmark-color(chip-theme.$checkmark-color, $query);\n    @include chip-theme.trailing-action-color(\n      chip-theme.$trailing-action-color,\n      $query\n    );\n    @include chip-theme.text-label-type-scale(chip-theme.$type-scale, $query);\n    @include chip-theme.graphic-size(chip-theme.$leading-icon-size, $query);\n    @include chip-theme.icon-size(chip-theme.$leading-icon-size, $query);\n    @include chip-theme.checkmark-size(chip-theme.$checkmark-size, $query);\n    @include chip-theme.trailing-action-size(\n      chip-theme.$trailing-action-size,\n      $query\n    );\n\n    @include _high-contrast-mode($query);\n  }\n\n  .mdc-evolution-chip--filter {\n    @include chip-theme.selected-container-color(\n      chip-theme.$filter-selected-container-color,\n      $query\n    );\n  }\n\n  .mdc-evolution-chip--with-avatar {\n    @include chip-theme.with-graphic-horizontal-padding(\n      chip-theme.$avatar-leading-padding,\n      chip-theme.$avatar-trailing-padding,\n      chip-theme.$trailing-padding\n    );\n    @include chip-theme.with-graphic-and-trailing-action-horizontal-padding(\n      chip-theme.$avatar-leading-padding,\n      chip-theme.$avatar-trailing-padding,\n      chip-theme.$trailing-action-leading-padding,\n      chip-theme.$trailing-action-trailing-padding\n    );\n    @include chip-theme.graphic-size(chip-theme.$avatar-size, $query);\n    @include chip-theme.icon-size(chip-theme.$avatar-size, $query);\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use '@material/animation/variables' as animation-variables;\n@use '@material/theme/custom-properties';\n@use '@material/base/mixins' as base-mixins;\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/rtl/rtl';\n@use '@material/theme/css';\n@use '@material/theme/theme';\n@use '@material/theme/theme-color';\n\n$baseline-color: black !default;\n$umbra-opacity: 0.2 !default;\n$penumbra-opacity: 0.14 !default;\n$ambient-opacity: 0.12 !default;\n\n$umbra-map: (\n  0: '0px 0px 0px 0px',\n  1: '0px 2px 1px -1px',\n  2: '0px 3px 1px -2px',\n  3: '0px 3px 3px -2px',\n  4: '0px 2px 4px -1px',\n  5: '0px 3px 5px -1px',\n  6: '0px 3px 5px -1px',\n  7: '0px 4px 5px -2px',\n  8: '0px 5px 5px -3px',\n  9: '0px 5px 6px -3px',\n  10: '0px 6px 6px -3px',\n  11: '0px 6px 7px -4px',\n  12: '0px 7px 8px -4px',\n  13: '0px 7px 8px -4px',\n  14: '0px 7px 9px -4px',\n  15: '0px 8px 9px -5px',\n  16: '0px 8px 10px -5px',\n  17: '0px 8px 11px -5px',\n  18: '0px 9px 11px -5px',\n  19: '0px 9px 12px -6px',\n  20: '0px 10px 13px -6px',\n  21: '0px 10px 13px -6px',\n  22: '0px 10px 14px -6px',\n  23: '0px 11px 14px -7px',\n  24: '0px 11px 15px -7px',\n) !default;\n\n$penumbra-map: (\n  0: '0px 0px 0px 0px',\n  1: '0px 1px 1px 0px',\n  2: '0px 2px 2px 0px',\n  3: '0px 3px 4px 0px',\n  4: '0px 4px 5px 0px',\n  5: '0px 5px 8px 0px',\n  6: '0px 6px 10px 0px',\n  7: '0px 7px 10px 1px',\n  8: '0px 8px 10px 1px',\n  9: '0px 9px 12px 1px',\n  10: '0px 10px 14px 1px',\n  11: '0px 11px 15px 1px',\n  12: '0px 12px 17px 2px',\n  13: '0px 13px 19px 2px',\n  14: '0px 14px 21px 2px',\n  15: '0px 15px 22px 2px',\n  16: '0px 16px 24px 2px',\n  17: '0px 17px 26px 2px',\n  18: '0px 18px 28px 2px',\n  19: '0px 19px 29px 2px',\n  20: '0px 20px 31px 3px',\n  21: '0px 21px 33px 3px',\n  22: '0px 22px 35px 3px',\n  23: '0px 23px 36px 3px',\n  24: '0px 24px 38px 3px',\n) !default;\n\n$ambient-map: (\n  0: '0px 0px 0px 0px',\n  1: '0px 1px 3px 0px',\n  2: '0px 1px 5px 0px',\n  3: '0px 1px 8px 0px',\n  4: '0px 1px 10px 0px',\n  5: '0px 1px 14px 0px',\n  6: '0px 1px 18px 0px',\n  7: '0px 2px 16px 1px',\n  8: '0px 3px 14px 2px',\n  9: '0px 3px 16px 2px',\n  10: '0px 4px 18px 3px',\n  11: '0px 4px 20px 3px',\n  12: '0px 5px 22px 4px',\n  13: '0px 5px 24px 4px',\n  14: '0px 5px 26px 4px',\n  15: '0px 6px 28px 5px',\n  16: '0px 6px 30px 5px',\n  17: '0px 6px 32px 5px',\n  18: '0px 7px 34px 6px',\n  19: '0px 7px 36px 6px',\n  20: '0px 8px 38px 7px',\n  21: '0px 8px 40px 7px',\n  22: '0px 8px 42px 7px',\n  23: '0px 9px 44px 8px',\n  24: '0px 9px 46px 8px',\n) !default;\n\n// The css property used for elevation. In most cases this should not be changed. It is exposed\n// as a variable for abstraction / easy use when needing to reference the property directly, for\n// example in a `will-change` rule.\n$property: box-shadow !default;\n\n// The default color for the elevation overlay.\n$overlay-color: #fff;\n\n// The css property used for elevation overlay transitions. In most cases this should not be changed. It is exposed\n// as a variable for abstraction / easy use when needing to reference the property directly, for\n// example in a `will-change` rule.\n$overlay-property: opacity !default;\n\n// The default duration value for elevation transitions.\n$transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$transition-timing-function: animation-variables.$standard-curve-timing-function !default;\n\n///\n/// Sets the elevation transition value.\n///\n/// @param {String} $duration - The duration of the transition.\n/// @param {String} $easing - The easing function for the transition.\n/// @return {String}\n///\n@function transition-value(\n  $duration: $transition-duration,\n  $easing: $transition-timing-function\n) {\n  @return #{$property} #{$duration} #{$easing};\n}\n\n///\n/// Sets the elevation overlay transition value.\n///\n/// @param {String} $duration - The duration of the transition.\n/// @param {String} $easing - The easing function for the transition.\n/// @return {String}\n///\n@function overlay-transition-value(\n  $duration: $transition-duration,\n  $easing: $transition-timing-function\n) {\n  @return #{$overlay-property} #{$duration} #{$easing};\n}\n\n///\n/// Creates a box-shadow from the Material elevation system.\n/// @param {Number} $level - the level of the Material elevation system.\n/// @param {String} $color - the color of the shadow.\n/// @param {Number} $opacity-boost [0] - optional opacity boost for the shadow.\n/// @return {List} the complete box shadow.\n///\n@function _box-shadow($level, $color, $opacity-boost: 0) {\n  $color: theme-color.prop-value($color);\n  $umbra-z-value: map.get($umbra-map, $level);\n  $penumbra-z-value: map.get($penumbra-map, $level);\n  $ambient-z-value: map.get($ambient-map, $level);\n\n  $umbra-color: rgba($color, $umbra-opacity + $opacity-boost);\n  $penumbra-color: rgba($color, $penumbra-opacity + $opacity-boost);\n  $ambient-color: rgba($color, $ambient-opacity + $opacity-boost);\n\n  @return (\n    #{'#{$umbra-z-value} #{$umbra-color}'},\n    #{'#{$penumbra-z-value} #{$penumbra-color}'},\n    #{$ambient-z-value} $ambient-color\n  );\n}\n\n// Returns the correct box-shadow specified by $z-value.\n// The $z-value must be between 0 and 24.\n// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use\n// $opacity-boost.\n@function elevation-box-shadow(\n  $z-value,\n  $color: $baseline-color,\n  $opacity-boost: 0\n) {\n  @if meta.type-of($z-value) != number or not math.is-unitless($z-value) {\n    @error \"$z-value must be a unitless number, but received '#{$z-value}'\";\n  }\n\n  @if $z-value < 0 or $z-value > 24 {\n    @error \"$z-value must be between 0 and 24, but received '#{$z-value}'\";\n  }\n\n  @return _box-shadow($z-value, $color, $opacity-boost);\n}\n\n///\n/// Returns a shadow or null if params are invalid.\n/// @param {Number} $level - the level of the Material elevation system.\n/// @param {String} $color - the color of the shadow.\n/// @return {List|null} the complete box shadow or null.\n///\n@function _shadow($level, $color) {\n  @if $level == null and $color == null {\n    // Do not emit a warning if both are null, which means the user did not\n    // provide tokens.\n    @return null;\n  }\n\n  @if $level == null or $color == null {\n    // If one of the tokens is null, emit a warning: the user may not realize\n    // that both are required.\n    @warn \"both $level and $color are required; received $level: '#{$level}', $color: '#{$color}'\";\n    @return null;\n  }\n\n  @if $level < 0 or $level > 24 {\n    @warn \"$level must be between 0 and 24; received '#{$level}'\";\n    @return null;\n  }\n\n  @return _box-shadow($level, $color);\n}\n\n@function get-elevation($level) {\n  @return (box-shadow: elevation-box-shadow($level));\n}\n\n///\n/// Sets the shadow of the element.\n///\n/// @param {String} $box-shadow - The shadow to apply to the element.\n///\n@mixin _box-shadow($shadow, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  @include feature-targeting.targets($feat-color) {\n    @include theme.property(box-shadow, $shadow);\n  }\n}\n\n///\n/// Sets the shadow of the element.\n///\n/// @param {String} $box-shadow - The shadow to apply to the element.\n///\n@mixin shadow($box-shadow, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  @include feature-targeting.targets($feat-color) {\n    @if custom-properties.is-custom-prop($box-shadow) {\n      // TODO(b/185188458): Use theme.property() once resolved.\n      $fallback: custom-properties.get-fallback($box-shadow);\n\n      // var(--<box-shadow-prop>, var(--m-elevation-box-shadow-for-gss))\n      $gss-custom-prop: custom-properties.create(\n        custom-properties.get-varname($box-shadow),\n        custom-properties.create(elevation-box-shadow-for-gss)\n      );\n\n      $value: custom-properties.create-var($gss-custom-prop);\n      @if $value == null {\n        // Custom properties are disabled, since $gss-custom-prop\n        // does not have a fallback. Avoid emitting two non-custom\n        // prop declarations by setting $fallback to null.\n        $value: $fallback;\n        $fallback: null;\n      }\n\n      @include custom-properties.declaration(\n        custom-properties.create(elevation-box-shadow-for-gss, $fallback)\n      );\n      @include css.declaration(box-shadow, $value, $fallback-value: $fallback);\n    } @else {\n      /* @alternate */\n      box-shadow: $box-shadow;\n    }\n  }\n}\n\n///\n/// Sets the elevation overlay surface required positioning.\n///\n@mixin overlay-surface-position($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    /* @alternate */\n    position: relative;\n  }\n}\n\n///\n/// Sets the dimensions of the elevation overlay, including positioning and sizing.\n///\n/// @param {Number} $width - The width of the elevation overlay\n/// @param {Number} [$height] - The height of the elevation overlay\n/// @param {Boolean} [$has-content-sizing] - Set to false if the container has no content sizing\n///\n@mixin overlay-dimensions(\n  $width,\n  $height: $width,\n  $has-content-sizing: true,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-elevation-overlay {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(width, $width);\n      @include theme.property(height, $height);\n\n      @if $has-content-sizing {\n        top: 0;\n        @include rtl.ignore-next-line();\n        left: 0;\n      } @else {\n        top: 50%;\n        @include rtl.ignore-next-line();\n        left: 50%;\n        transform: translate(-50%, -50%);\n      }\n    }\n  }\n}\n\n///\n/// Sets the elevation overlay fill color.\n/// Expected to be called directly on the elevation overlay element.\n///\n/// @param {Color} $color - The color of the elevation overlay.\n///\n@mixin overlay-fill-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  @include feature-targeting.targets($feat-color) {\n    @include theme.property(background-color, $color);\n  }\n}\n\n///\n/// Applies the given color to the container of the overlay.\n/// @param {color} $color - the color of the overlay container\n///\n@mixin overlay-container-color($color, $query: feature-targeting.all()) {\n  .mdc-elevation-overlay {\n    @include overlay-fill-color($color, $query: $query);\n  }\n}\n\n///\n/// Sets the elevation overlay opacity.\n/// Expected to be called from a parent element.\n///\n/// @param {Number} $opacity - The opacity of the elevation overlay.\n///\n@mixin overlay-opacity($opacity, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-elevation-overlay {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(opacity, $opacity);\n    }\n  }\n}\n\n// Applies the correct CSS rules to an element to give it the elevation specified by $z-value.\n// The $z-value must be between 0 and 24.\n// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use\n// $opacity-boost.\n@mixin elevation(\n  $z-value,\n  $color: $baseline-color,\n  $opacity-boost: 0,\n  $query: feature-targeting.all()\n) {\n  $box-shadow: elevation-box-shadow(\n    $z-value,\n    $color: $color,\n    $opacity-boost: $opacity-boost\n  );\n\n  @include shadow($box-shadow, $query: $query);\n}\n\n///\n/// Represents the configurable values of the elevation theme.\n///\n$_theme-values: (\n  shadow: null,\n  overlay-opacity: null,\n  overlay-color: null,\n);\n\n///\n/// Applies the shadow theme with the given $resolver function.\n/// @param {Function} $resolver - a function that returns a valid theme config.\n///   @see resolver for an example and expected arguments and return value.\n/// Accepts the following optional keyword args:\n/// @param {Number} $elevation - the level in the elevation system.\n/// @param {String} $shadow-color - the color used for the shadow.\n///\n@mixin with-resolver($resolver, $query: feature-targeting.all(), $args...) {\n  @if $resolver {\n    @include _theme(meta.call($resolver, $args...), $query: $query);\n  }\n}\n\n///\n/// Applies the given theme with validation.\n/// @param {Map} $theme - @see $_theme-values for accepted theme properties.\n///\n@mixin theme($theme: (), $query: feature-targeting.all()) {\n  @include theme.validate-theme($_theme-values, $theme);\n  @include _theme($theme, $query: $query);\n}\n\n///\n/// Applies the given theme.\n/// @param {Map} $theme - @see $_theme-values for accepted theme properties.\n///\n@mixin _theme($theme: (), $query: feature-targeting.all()) {\n  @include shadow(map.get($theme, shadow), $query: $query);\n  @include overlay-opacity(map.get($theme, overlay-opacity), $query: $query);\n  @include overlay-container-color(\n    map.get($theme, overlay-color),\n    $query: $query\n  );\n}\n\n///\n/// Transforms the following optional parameters into a theme config.\n/// @param {Number} $elevation - the level of the elevation system in Material.\n/// @param {String} $shadow-color - the color to be used by the shadow.\n/// @return {Map} @see $_theme-values for accepted theme properties.\n///\n@function resolver($args...) {\n  $opts: meta.keywords($args);\n  $elevation: map.get($opts, elevation);\n  $shadow-color: map.get($opts, shadow-color);\n  @if custom-properties.is-custom-prop($elevation) {\n    @return _resolve-custom-props($elevation, $shadow-color);\n  }\n\n  @return (shadow: _shadow($elevation, $shadow-color));\n}\n\n@function _resolve-custom-props($elevation, $shadow-color) {\n  $fallback-dp: custom-properties.get-fallback($elevation);\n  $fallback-shadow-color: custom-properties.get-fallback($shadow-color);\n  $shadow: custom-properties.set-fallback(\n    $elevation,\n    _shadow($fallback-dp, $fallback-shadow-color)\n  );\n  @return (shadow: $shadow);\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use './gss';\n\n/// When true, add an additional property/value declaration before declarations\n/// that use advanced features such as custom properties or CSS functions. This\n/// adds fallback support for older browsers such as IE11 that do not support\n/// these features at the cost of additional CSS. Set this variable to false to\n/// disable generating fallback declarations.\n$enable-fallback-declarations: true !default;\n\n/// Writes a CSS property/value declaration. This mixin is used throughout the\n/// theme package for consistency for dynamically setting CSS property values.\n///\n/// This mixin may optionally take a fallback value. For advanced features such\n/// as custom properties or CSS functions like min and max, a fallback value is\n/// recommended to support older browsers.\n///\n/// @param {String} $property - The CSS property of the declaration.\n/// @param {*} $value - The value of the CSS declaration. The value should be\n///     resolved by other theme functions first (i.e. custom property Maps and\n///     Material theme keys are not supported in this mixin). If the value is\n///     null, no declarations will be emitted.\n/// @param {*} $fallback - An optional fallback value for older browsers. If\n///     provided, a second property/value declaration will be added before the\n///     main property/value declaration.\n/// @param {Map} $gss - An optional Map of GSS annotations to add.\n/// @param {Bool} $important - If true, add `!important` to the declaration.\n@mixin declaration(\n  $property,\n  $value,\n  $fallback-value: null,\n  $gss: (),\n  $important: false\n) {\n  // Normally setting a null value to a property will not emit CSS, so mixins\n  // wouldn't need to check this. However, Sass will throw an error if the\n  // interpolated property is a custom property.\n  @if $value != null {\n    $important-rule: if($important, ' !important', '');\n\n    @if $fallback-value and $enable-fallback-declarations {\n      @include gss.annotate($gss);\n      #{$property}: #{$fallback-value} #{$important-rule};\n\n      // Add @alternate to annotations.\n      $gss: map.merge(\n        $gss,\n        (\n          alternate: true,\n        )\n      );\n    }\n\n    @include gss.annotate($gss);\n    #{$property}: #{$value}#{$important-rule};\n  }\n}\n\n/// Unpacks shorthand values for CSS properties (i.e. lists of 1-3 values).\n/// If a list of 4 values is given, it is returned as-is.\n///\n/// Examples:\n///\n/// unpack-value(4px) => 4px 4px 4px 4px\n/// unpack-value(4px 2px) => 4px 2px 4px 2px\n/// unpack-value(4px 2px 2px) => 4px 2px 2px 2px\n/// unpack-value(4px 2px 0 2px) => 4px 2px 0 2px\n///\n/// @param {Number | Map | List} $value - List of 1 to 4 value numbers.\n/// @return {List} a List of 4 value numbers.\n@function unpack-value($value) {\n  @if meta.type-of($value) == 'map' or list.length($value) == 1 {\n    @return $value $value $value $value;\n  } @else if list.length($value) == 4 {\n    @return $value;\n  } @else if list.length($value) == 3 {\n    @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 3)\n      list.nth($value, 2);\n  } @else if list.length($value) == 2 {\n    @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 1)\n      list.nth($value, 2);\n  }\n\n  @error \"Invalid CSS property value: '#{$value}' is more than 4 values\";\n}\n","//\n// Copyright 2019 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use 'sass:math';\n@use '@material/base/mixins' as base-mixins;\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/rtl/rtl';\n\n$height: 48px !default;\n$width: $height !default;\n\n/// Styles applied to the component's touch target wrapper element.\n@mixin wrapper($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-touch-target-wrapper {\n    @include feature-targeting.targets($feat-structure) {\n      // Ensure that styles are only emitted once across all components that\n      // have increased touch targets.\n      @include base-mixins.emit-once('mdc-touch-target/wrapper') {\n        // NOTE: Will change to `inline-block` in the future, but keeping as is\n        // temporarily for backwards-compatibility.\n        display: inline;\n      }\n    }\n  }\n}\n\n/// Styles applied to the component's inner touch target element.\n/// By default, only sets the inner element height to the minimum touch target\n/// height ($mdc-touch-target-height).\n/// @param {Boolean} $set-width [false] - Sets the inner element width to the\n///     minimum touch target width ($mdc-touch-target-width).\n/// @param $height [$mdc-touch-target-height] - Touch target height.\n/// @param $width [$mdc-touch-target-width] - Touch target width.\n@mixin touch-target(\n  $set-width: false,\n  $query: feature-targeting.all(),\n  $height: $height,\n  $width: $width\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    position: absolute;\n    top: 50%;\n    height: $height;\n  }\n\n  @if $set-width {\n    @include feature-targeting.targets($feat-structure) {\n      @include rtl.ignore-next-line();\n      left: 50%;\n      width: $width;\n      transform: translate(-50%, -50%);\n    }\n  } @else {\n    @include feature-targeting.targets($feat-structure) {\n      left: 0;\n      right: 0;\n      transform: translateY(-50%);\n    }\n  }\n}\n\n/// Applies margin to the component with the increased touch target,\n/// to compensate for the touch target.\n@mixin margin(\n  $component-height,\n  $component-width: null,\n  $touch-target-height: $height,\n  $touch-target-width: $width,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  $vertical-margin-value: math.div($touch-target-height - $component-height, 2);\n\n  @include feature-targeting.targets($feat-structure) {\n    margin-top: $vertical-margin-value;\n    margin-bottom: $vertical-margin-value;\n  }\n\n  @if $component-width {\n    $horizontal-margin-value: math.div(\n      $touch-target-width - $component-width,\n      2\n    );\n\n    @include feature-targeting.targets($feat-structure) {\n      margin-right: $horizontal-margin-value;\n      margin-left: $horizontal-margin-value;\n    }\n  }\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// Selector '.mdc-*' should only be used in this project.\n// stylelint-disable selector-class-pattern --\n// Internal styling for Chip MDC component.\n\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:color';\n@use '@material/dom/dom';\n@use '@material/density/density';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/shape/shape';\n@use '@material/ripple/ripple-theme';\n@use '@material/rtl/rtl';\n@use '@material/theme/theme';\n@use '@material/theme/keys';\n@use '@material/elevation/elevation-theme';\n@use '@material/tokens/resolvers';\n@use '@material/theme/state';\n@use '@material/theme/theme-color';\n@use '@material/typography/typography';\n\n$height: 32px;\n$minimum-height: 24px;\n$maximum-height: $height;\n$density-scale: density.$default-scale;\n$density-config: (\n  height: (\n    default: $height,\n    maximum: $maximum-height,\n    minimum: $minimum-height,\n  ),\n);\n$radius: math.div($height, 2);\n$type-scale: body2;\n$container-color: color.mix(\n  theme-color.prop-value(on-surface),\n  theme-color.prop-value(surface),\n  12%\n);\n$text-label-color: rgba(theme-color.prop-value(on-surface), 0.87);\n$icon-color: rgba(theme-color.prop-value(on-surface), 0.87);\n$checkmark-color: rgba(theme-color.prop-value(on-surface), 0.87);\n$trailing-action-color: rgba(theme-color.prop-value(on-surface), 0.87);\n$ripple-color: on-surface;\n$checkmark-size: 20px;\n$leading-icon-size: 20px;\n$trailing-action-size: 18px;\n$leading-padding: 12px;\n$trailing-padding: 12px;\n$avatar-size: 24px;\n$avatar-leading-padding: 4px;\n$avatar-trailing-padding: 8px;\n$graphic-leading-padding: 6px;\n$graphic-trailing-padding: 6px;\n$trailing-action-leading-padding: 8px;\n$trailing-action-trailing-padding: 8px;\n$ripple-target: '.mdc-evolution-chip__ripple';\n$ripple-target-primary: '.mdc-evolution-chip__ripple--primary';\n$ripple-target-trailing: '.mdc-evolution-chip__ripple--trailing';\n\n// Filter chip colors\n$filter-selected-container-color: color.mix(\n  theme-color.prop-value(on-surface),\n  $container-color,\n  8%\n);\n\n$_light-theme: (\n  container-elevation: null,\n  container-height: null,\n  container-shadow-color: null,\n  container-shape: null,\n  disabled-label-text-color: null,\n  disabled-label-text-opacity: null,\n  disabled-outline-color: null,\n  disabled-outline-opacity: null,\n  elevated-container-color: null,\n  elevated-container-elevation: null,\n  elevated-container-shadow-color: null,\n  container-surface-tint-layer-color: null,\n  elevated-disabled-container-color: null,\n  elevated-disabled-container-elevation: null,\n  elevated-disabled-container-opacity: null,\n  elevated-focus-container-elevation: null,\n  elevated-hover-container-elevation: null,\n  elevated-pressed-container-elevation: null,\n  elevated-selected-container-color: null,\n  elevated-selected-container-elevation: null,\n  elevated-unselected-container-color: null,\n  flat-container-elevation: null,\n  flat-disabled-outline-color: null,\n  flat-disabled-outline-opacity: null,\n  flat-disabled-selected-outline-color: null,\n  flat-disabled-selected-outline-opacity: null,\n  flat-disabled-unselected-outline-color: null,\n  flat-disabled-unselected-outline-opacity: null,\n  flat-focus-outline-color: null,\n  flat-outline-color: null,\n  flat-outline-width: null,\n  flat-selected-container-color: null,\n  flat-selected-focus-container-elevation: null,\n  flat-selected-hover-container-elevation: null,\n  flat-selected-outline-color: null,\n  flat-selected-outline-width: null,\n  flat-selected-pressed-container-elevation: null,\n  flat-unselected-focus-container-elevation: null,\n  flat-unselected-focus-outline-color: null,\n  flat-unselected-hover-container-elevation: null,\n  flat-unselected-outline-color: null,\n  flat-unselected-outline-width: null,\n  flat-unselected-pressed-container-elevation: null,\n  focus-label-text-color: null,\n  focus-outline-color: null,\n  focus-state-layer-color: null,\n  focus-state-layer-opacity: null,\n  hover-label-text-color: null,\n  hover-state-layer-color: null,\n  hover-state-layer-opacity: null,\n  label-text-color: null,\n  label-text-font: null,\n  label-text-line-height: null,\n  label-text-size: null,\n  label-text-tracking: null,\n  label-text-weight: null,\n  outline-color: null,\n  outline-width: null,\n  pressed-label-text-color: null,\n  pressed-state-layer-color: null,\n  pressed-state-layer-opacity: null,\n  selected-focus-label-text-color: null,\n  selected-focus-state-layer-color: null,\n  selected-focus-state-layer-opacity: null,\n  selected-hover-label-text-color: null,\n  selected-hover-state-layer-color: null,\n  selected-hover-state-layer-opacity: null,\n  selected-label-text-color: null,\n  selected-pressed-label-text-color: null,\n  selected-pressed-state-layer-color: null,\n  selected-pressed-state-layer-opacity: null,\n  unselected-focus-label-text-color: null,\n  unselected-focus-state-layer-color: null,\n  unselected-focus-state-layer-opacity: null,\n  unselected-hover-label-text-color: null,\n  unselected-hover-state-layer-color: null,\n  unselected-hover-state-layer-opacity: null,\n  unselected-label-text-color: null,\n  unselected-pressed-label-text-color: null,\n  unselected-pressed-state-layer-color: null,\n  unselected-pressed-state-layer-opacity: null,\n  with-avatar-avatar-shape: null,\n  with-avatar-avatar-size: null,\n  with-avatar-disabled-avatar-opacity: null,\n  with-icon-disabled-icon-color: null,\n  with-icon-disabled-icon-opacity: null,\n  with-icon-focus-icon-color: null,\n  with-icon-hover-icon-color: null,\n  with-icon-icon-color: null,\n  with-icon-icon-size: null,\n  with-icon-pressed-icon-color: null,\n  with-icon-selected-focus-icon-color: null,\n  with-icon-selected-hover-icon-color: null,\n  with-icon-selected-icon-color: null,\n  with-icon-selected-pressed-icon-color: null,\n  with-icon-unselected-focus-icon-color: null,\n  with-icon-unselected-hover-icon-color: null,\n  with-icon-unselected-icon-color: null,\n  with-icon-unselected-pressed-icon-color: null,\n  with-leading-icon-disabled-leading-icon-color: null,\n  with-leading-icon-disabled-leading-icon-opacity: null,\n  with-leading-icon-focus-leading-icon-color: null,\n  with-leading-icon-hover-leading-icon-color: null,\n  with-leading-icon-leading-icon-color: null,\n  with-leading-icon-leading-icon-size: null,\n  with-leading-icon-pressed-leading-icon-color: null,\n  with-trailing-icon-disabled-trailing-icon-color: null,\n  with-trailing-icon-disabled-trailing-icon-opacity: null,\n  with-trailing-icon-focus-trailing-icon-color: null,\n  with-trailing-icon-hover-trailing-icon-color: null,\n  with-trailing-icon-pressed-trailing-icon-color: null,\n  with-trailing-icon-trailing-icon-color: null,\n  with-trailing-icon-trailing-icon-size: null,\n);\n\n@mixin theme-styles($theme, $resolvers: resolvers.$material) {\n  @include theme.validate-theme-keys($_light-theme, $theme);\n\n  @include _container-shape(map.get($theme, container-shape));\n  @include _avatar-shape(map.get($theme, with-avatar-avatar-shape));\n  @include graphic-size(map.get($theme, with-avatar-avatar-size));\n  @include height(map.get($theme, container-height));\n  @include elevation-theme.overlay-container-color(\n    map.get($theme, container-surface-tint-layer-color)\n  );\n  @include _container-elevation(\n    map.get($resolvers, elevation),\n    $shadow-color: map.get($theme, container-shadow-color),\n    $map: (default: map.get($theme, container-elevation))\n  );\n  @include _container-elevation(\n    map.get($resolvers, elevation),\n    $shadow-color: map.get($theme, flat-container-shadow-color),\n    $map: (enabled: map.get($theme, flat-container-elevation))\n  );\n  @include _container-elevation(\n    map.get($resolvers, elevation),\n    $shadow-color: map.get($theme, elevated-container-shadow-color),\n    $map: (\n      enabled: map.get($theme, elevated-container-elevation),\n      disabled: map.get($theme, elevated-disabled-container-elevation),\n      hover: map.get($theme, elevated-hover-container-elevation),\n      focus: map.get($theme, elevated-focus-container-elevation),\n      pressed: map.get($theme, elevated-pressed-container-elevation)\n    )\n  );\n  @include _selected-container-elevation(\n    map.get($resolvers, elevation),\n    $shadow-color: map.get($theme, elevated-container-shadow-color),\n    $map: (\n      enabled: map.get($theme, elevated-selected-container-elevation),\n      disabled: map.get($theme, elevated-selected-disabled-container-elevation),\n      hover: map.get($theme, elevated-selected-hover-container-elevation),\n      focus: map.get($theme, elevated-selected-focus-container-elevation),\n      pressed: map.get($theme, elevated-selected-pressed-container-elevation)\n    )\n  );\n  @include _selected-container-elevation(\n    map.get($resolvers, elevation),\n    $shadow-color: map.get($theme, elevated-container-shadow-color),\n    $map: (\n      enabled: map.get($theme, flat-selected-container-elevation),\n      disabled: map.get($theme, flat-selected-disabled-container-elevation),\n      hover: map.get($theme, flat-selected-hover-container-elevation),\n      focus: map.get($theme, flat-selected-focus-container-elevation),\n      pressed: map.get($theme, flat-selected-pressed-container-elevation)\n    )\n  );\n  @include _unselected-container-elevation(\n    map.get($resolvers, elevation),\n    $shadow-color: map.get($theme, elevated-container-shadow-color),\n    $map: (\n      enabled: map.get($theme, flat-unselected-container-elevation),\n      disabled: map.get($theme, flat-unselected-disabled-container-elevation),\n      hover: map.get($theme, flat-unselected-hover-container-elevation),\n      focus: map.get($theme, flat-unselected-focus-container-elevation),\n      pressed: map.get($theme, flat-unselected-pressed-container-elevation)\n    )\n  );\n  @include outline-color(\n    (\n      enabled: map.get($theme, flat-outline-color),\n      focus: map.get($theme, flat-focus-outline-color),\n      disabled: map.get($theme, flat-disabled-outline-color),\n    )\n  );\n  @include selected-outline-color(\n    (\n      enabled: map.get($theme, flat-selected-outline-color),\n      disabled: map.get($theme, flat-disabled-selected-outline-color),\n    )\n  );\n  @include _unselected-outline-color(\n    (\n      disabled: map.get($theme, flat-disabled-unselected-outline-color),\n      focus: map.get($theme, flat-unselected-focus-outline-color),\n      enabled: map.get($theme, flat-unselected-outline-color),\n    )\n  );\n  @include outline-width(map.get($theme, outline-width));\n  @include outline-width(map.get($theme, flat-outline-width));\n  @include _selected-outline-width(\n    map.get($theme, flat-selected-outline-width)\n  );\n  @include _unselected-outline-width(\n    map.get($theme, flat-unselected-outline-width)\n  );\n  @include container-color(\n    (\n      enabled: map.get($theme, elevated-container-color),\n      disabled: map.get($theme, elevated-disabled-container-color),\n    )\n  );\n  @include selected-container-color(\n    (\n      enabled: map.get($theme, elevated-selected-container-color),\n    )\n  );\n  @include selected-container-color(\n    (\n      enabled: map.get($theme, flat-selected-container-color),\n    )\n  );\n  @include _unselected-container-color(\n    (\n      enabled: map.get($theme, elevated-unselected-container-color),\n    )\n  );\n  @include _label-text-typography(\n    (\n      font: map.get($theme, label-text-font),\n      line-height: map.get($theme, label-text-line-height),\n      size: map.get($theme, label-text-size),\n      weight: map.get($theme, label-text-weight),\n      tracking: map.get($theme, label-text-tracking),\n    )\n  );\n  @include text-label-color(\n    (\n      enabled: map.get($theme, label-text-color),\n      hover: map.get($theme, hover-label-text-color),\n      focus: map.get($theme, focus-label-text-color),\n      pressed: map.get($theme, pressed-label-text-color),\n      disabled: map.get($theme, disabled-label-text-color),\n    )\n  );\n  @include selected-text-label-color(\n    (\n      enabled: map.get($theme, selected-label-text-color),\n      hover: map.get($theme, selected-hover-label-text-color),\n      focus: map.get($theme, selected-focus-label-text-color),\n      pressed: map.get($theme, selected-pressed-label-text-color),\n      disabled: map.get($theme, selected-disabled-label-text-color),\n    )\n  );\n  @include _unselected-text-label-color(\n    (\n      enabled: map.get($theme, unselected-label-text-color),\n      hover: map.get($theme, unselected-hover-label-text-color),\n      focus: map.get($theme, unselected-focus-label-text-color),\n      pressed: map.get($theme, unselected-pressed-label-text-color),\n      disabled: map.get($theme, unselected-disabled-label-text-color),\n    )\n  );\n\n  @include icon-size(map.get($theme, with-icon-icon-size));\n  @include icon-color(\n    (\n      enabled: map.get($theme, with-icon-icon-color),\n      disabled: map.get($theme, with-icon-disabled-icon-color),\n      hover: map.get($theme, with-icon-hover-icon-color),\n      focus: map.get($theme, with-icon-focus-icon-color),\n      pressed: map.get($theme, with-icon-pressed-icon-color),\n    )\n  );\n  @include _selected-icon-color(\n    (\n      enabled: map.get($theme, with-icon-selected-icon-color),\n      disabled: map.get($theme, with-icon-selected-disabled-icon-color),\n      hover: map.get($theme, with-icon-selected-hover-icon-color),\n      focus: map.get($theme, with-icon-selected-focus-icon-color),\n      pressed: map.get($theme, with-icon-selected-pressed-icon-color),\n    )\n  );\n  @include _unselected-icon-color(\n    (\n      enabled: map.get($theme, with-icon-unselected-icon-color),\n      disabled: map.get($theme, with-icon-unselected-disabled-icon-color),\n      hover: map.get($theme, with-icon-unselected-hover-icon-color),\n      focus: map.get($theme, with-icon-unselected-focus-icon-color),\n      pressed: map.get($theme, with-icon-unselected-pressed-icon-color),\n    )\n  );\n  @include icon-color(\n    (\n      disabled: map.get($theme, with-leading-icon-disabled-leading-icon-color),\n      focus: map.get($theme, with-leading-icon-focus-leading-icon-color),\n      hover: map.get($theme, with-leading-icon-hover-leading-icon-color),\n      enabled: map.get($theme, with-leading-icon-leading-icon-color),\n      pressed: map.get($theme, with-leading-icon-pressed-leading-icon-color),\n    )\n  );\n  @include trailing-action-color(\n    (\n      disabled: map.get($theme, with-trailing-icon-disabled-trailing-icon-color),\n      focus: map.get($theme, with-trailing-icon-focus-trailing-icon-color),\n      hover: map.get($theme, with-trailing-icon-hover-trailing-icon-color),\n      enabled: map.get($theme, with-trailing-icon-trailing-icon-color),\n      pressed: map.get($theme, with-trailing-icon-pressed-trailing-icon-color),\n    )\n  );\n  @include _ripple-theme(\n    (\n      focus-state-layer-color: map.get($theme, focus-state-layer-color),\n      focus-state-layer-opacity: map.get($theme, focus-state-layer-opacity),\n      hover-state-layer-color: map.get($theme, hover-state-layer-color),\n      hover-state-layer-opacity: map.get($theme, hover-state-layer-opacity),\n      pressed-state-layer-color: map.get($theme, pressed-state-layer-color),\n      pressed-state-layer-opacity: map.get($theme, pressed-state-layer-opacity),\n    )\n  );\n  @include _selected-ripple-theme(\n    (\n      focus-state-layer-color: map.get($theme, selected-focus-state-layer-color),\n      focus-state-layer-opacity:\n        map.get($theme, selected-focus-state-layer-opacity),\n      hover-state-layer-color: map.get($theme, selected-hover-state-layer-color),\n      hover-state-layer-opacity:\n        map.get($theme, selected-hover-state-layer-opacity),\n      pressed-state-layer-color:\n        map.get($theme, selected-pressed-state-layer-color),\n      pressed-state-layer-opacity:\n        map.get($theme, selected-pressed-state-layer-opacity),\n    )\n  );\n  @include _unselected-ripple-theme(\n    (\n      focus-state-layer-color:\n        map.get($theme, unselected-focus-state-layer-color),\n      focus-state-layer-opacity:\n        map.get($theme, unselected-focus-state-layer-opacity),\n      hover-state-layer-color:\n        map.get($theme, unselected-hover-state-layer-color),\n      hover-state-layer-opacity:\n        map.get($theme, unselected-hover-state-layer-opacity),\n      pressed-state-layer-color:\n        map.get($theme, unselected-pressed-state-layer-color),\n      pressed-state-layer-opacity:\n        map.get($theme, unselected-pressed-state-layer-opacity),\n    )\n  );\n}\n\n@mixin _ripple-theme($ripple-theme) {\n  .mdc-evolution-chip__action--primary {\n    @include ripple-theme.internal-theme-styles(\n      (\n        focus-state-layer-color: map.get($ripple-theme, focus-state-layer-color),\n        focus-state-layer-opacity:\n          map.get($ripple-theme, focus-state-layer-opacity),\n        hover-state-layer-color: map.get($ripple-theme, hover-state-layer-color),\n        hover-state-layer-opacity:\n          map.get($ripple-theme, hover-state-layer-opacity),\n        pressed-state-layer-color:\n          map.get($ripple-theme, pressed-state-layer-color),\n        pressed-state-layer-opacity:\n          map.get($ripple-theme, pressed-state-layer-opacity),\n      ),\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n@mixin _selected-ripple-theme($ripple-theme) {\n  @include _is-selected() {\n    @include _ripple-theme($ripple-theme);\n  }\n}\n\n@mixin _unselected-ripple-theme($ripple-theme) {\n  @include _is-unselected() {\n    @include _ripple-theme($ripple-theme);\n  }\n}\n\n///\n/// Sets the ripple color of the chip.\n/// @param {Color} $color - The color of the ripple.\n/// @param {Map} $opacity-map [null] - The optional opacity map for the states.\n///\n@mixin ripple-color(\n  $color,\n  $opacity-map: null,\n  $query: feature-targeting.all()\n) {\n  @include _ripple-color($color, $opacity-map, $query);\n}\n\n///\n/// Sets the selected ripple color of the chip.\n/// @param {Color} $color - The color of the ripple.\n/// @param {Map} $opacity-map [null] - The optional opacity map for the states.\n///\n@mixin selected-ripple-color(\n  $color,\n  $opacity-map: null,\n  $query: feature-targeting.all()\n) {\n  &.mdc-evolution-chip--selected {\n    @include ripple-color($color, $opacity-map, $query: $query);\n  }\n}\n\n@mixin _ripple-color($color, $opacity-map, $query) {\n  .mdc-evolution-chip__action--primary {\n    @include ripple-theme.states(\n      $color: $color,\n      $opacity-map: $opacity-map,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n///\n/// Sets the ripple color of the chip's trailing action.\n/// @param {Color} $color - The color of the ripple.\n/// @param {Map} $opacity-map [null] - The optional opacity map for the states.\n///\n@mixin trailing-action-ripple-color(\n  $color,\n  $opacity-map: null,\n  $query: feature-targeting.all()\n) {\n  .mdc-evolution-chip__action--trailing {\n    @include ripple-theme.states(\n      $color: $color,\n      $opacity-map: $opacity-map,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n///\n/// Sets the size of the trailing action's ripple.\n/// @param {Number} $size - The size of the ripple.\n///\n@mixin trailing-action-ripple-size($size, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  .mdc-evolution-chip__ripple--trailing {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $size);\n      @include theme.property(width, $size);\n    }\n  }\n}\n\n///\n/// Sets the density scale for the chip.\n/// @param {Number | String} $density-scale - Density scale value for component.\n///     Supported density scale values are `-2`, `-1`, `0`.\n///\n@mixin density($density-scale, $query: feature-targeting.all()) {\n  $height: density.prop-value(\n    $density-config: $density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include height($height, $query: $query);\n\n  @if $density-scale != 0 {\n    @include _reset-touch-target($query: $query);\n  }\n}\n\n///\n/// Resets touch target-related styles. This is called from the density mixin to\n/// automatically remove the increased touch target, since dense components\n/// don't have the same default a11y requirements.\n/// @access private\n///\n@mixin _reset-touch-target($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-evolution-chip__action-touch {\n    @include feature-targeting.targets($feat-structure) {\n      display: none;\n    }\n  }\n}\n\n///\n/// Sets custom height for the chip.\n/// @param {Number} $height - The height of the chip.\n///\n@mixin height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    @include theme.property(height, $height);\n  }\n}\n\n@mixin _container-shape($radius) {\n  @include shape.radius($radius);\n\n  #{$ripple-target} {\n    @include shape.radius($radius);\n  }\n\n  .mdc-evolution-chip__action--primary:before {\n    @include shape.radius($radius);\n  }\n}\n\n@mixin _avatar-shape($radius) {\n  .mdc-evolution-chip__icon--primary {\n    @include shape.radius($radius);\n  }\n}\n\n///\n/// Sets the shape radius of the chip.\n/// @param {Number|List} $radius - Shape radius in `border-radius` CSS format.\n/// @param {Boolean} $rtl-reflexive - True flips radius corners in RTL.\n///\n@mixin shape-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density.prop-value(\n    $density-config: $density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include shape.radius(\n    $radius,\n    $rtl-reflexive,\n    $component-height: $height,\n    $query: $query\n  );\n\n  #{$ripple-target} {\n    @include shape.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height: $height,\n      $query: $query\n    );\n  }\n\n  .mdc-evolution-chip__action--primary:before {\n    @include shape.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height: $height,\n      $query: $query\n    );\n  }\n\n  .mdc-evolution-chip__icon--primary {\n    @include shape.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height: $height,\n      $query: $query\n    );\n  }\n}\n\n///\n/// Sets the width of the chip outline.\n/// @param {Number} $width - The width of the chip outline.\n///\n@mixin outline-width($width, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-evolution-chip__action--primary:before {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(border-width, $width);\n    }\n  }\n}\n\n@mixin _selected-outline-width($width) {\n  @include _is-selected() {\n    @include outline-width($width);\n  }\n}\n\n@mixin _unselected-outline-width($width) {\n  @include _is-unselected() {\n    @include outline-width($width);\n  }\n}\n\n///\n/// Customizes the outline color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `enabled`, `focus`, `disabled`.\n///\n/// @example\n///   @include outline-color(blue);\n///   @include outline-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The outline's color or a state Map\n///\n@mixin outline-color($color-or-map, $query: feature-targeting.all()) {\n  @include _outline-color(state.get-default-state($color-or-map), $query);\n  @include _is-enabled() {\n    @include _outline-color(state.get-enabled-state($color-or-map), $query);\n  }\n  @include _focus-outline-color(state.get-focus-state($color-or-map), $query);\n  @include _is-disabled() {\n    @include _outline-color(state.get-disabled-state($color-or-map), $query);\n  }\n}\n\n@mixin _selected-outline-color($color-or-map) {\n  @include _is-selected() {\n    @include _outline-color($color-or-map);\n  }\n}\n\n///\n/// Customizes the selected outline color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `enabled`, `focus`, `disabled`.\n///\n/// @example\n///   @include selected-outline-color(blue);\n///   @include selected-outline-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The outline's color or a state Map\n///\n@mixin selected-outline-color($color-or-map, $query: feature-targeting.all()) {\n  @include _is-selected() {\n    @include outline-color($color-or-map, $query: $query);\n  }\n}\n\n@mixin _unselected-outline-color($color-or-map) {\n  @include _is-unselected() {\n    @include outline-color($color-or-map);\n  }\n}\n\n@mixin _outline-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-evolution-chip__action--primary:before {\n    @include feature-targeting.targets($feat-color) {\n      @if $color {\n        @include theme.property(border-color, $color);\n      }\n\n      // TODO(b/206694742): Find a better solution.\n      @if $color == transparent {\n        @include dom.forced-colors-mode($exclude-ie11: true) {\n          @include theme.property(border-color, CanvasText);\n        }\n      }\n    }\n  }\n}\n\n@mixin _focus-outline-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational) {\n    @include ripple-theme.focus() {\n      &:before {\n        @include feature-targeting.targets($feat-color) {\n          @if $color {\n            @include theme.property(border-color, $color);\n          }\n        }\n      }\n    }\n  }\n}\n\n///\n/// Sets the style of the chip outline.\n/// @param {String} $style - The style of the chip outline.\n///\n@mixin outline-style($style, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-evolution-chip__action--primary:before {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(border-style, $style);\n    }\n  }\n}\n\n///\n/// Customizes the container color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `enabled`, `disabled`.\n///\n/// @example\n///   @include container-color(blue);\n///   @include container-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The container's color or a state Map\n///\n@mixin container-color($color-or-map, $query: feature-targeting.all()) {\n  @include _container-color(state.get-default-state($color-or-map), $query);\n  @include _is-enabled() {\n    @include _container-color(state.get-enabled-state($color-or-map), $query);\n  }\n  @include _is-disabled() {\n    @include _container-color(state.get-disabled-state($color-or-map), $query);\n  }\n}\n\n///\n/// Customizes the selected container color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `enabled`, `disabled`.\n///\n/// @example\n///   @include selected-container-color(blue);\n///   @include selected-container-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The container's color or a state Map\n///\n@mixin selected-container-color(\n  $color-or-map,\n  $query: feature-targeting.all()\n) {\n  @include _is-selected() {\n    @include container-color($color-or-map, $query: $query);\n  }\n}\n\n@mixin _unselected-container-color($color-or-map) {\n  @include _is-unselected() {\n    @include container-color($color-or-map);\n  }\n}\n\n@mixin _container-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  @include feature-targeting.targets($feat-color) {\n    @if $color {\n      @include theme.property(background-color, $color);\n    }\n  }\n}\n\n///\n/// Customizes the text label color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `enabled`, `hover`, `focus`, `disabled`.\n///\n/// @example\n///   @include text-label-color(blue);\n///   @include text-label-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The label's color or a state Map\n///\n@mixin text-label-color($color-or-map, $query: feature-targeting.all()) {\n  @include _text-label-color(state.get-default-state($color-or-map), $query);\n  @include _is-enabled() {\n    @include _text-label-color(state.get-enabled-state($color-or-map), $query);\n  }\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational):hover {\n    @include _text-label-color(state.get-hover-state($color-or-map), $query);\n  }\n\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational) {\n    @include ripple-theme.focus() {\n      @include _text-label-color(state.get-focus-state($color-or-map), $query);\n    }\n  }\n\n  @include _is-disabled() {\n    @include _text-label-color(state.get-disabled-state($color-or-map), $query);\n  }\n}\n\n@mixin _label-text-typography($typography-theme) {\n  .mdc-evolution-chip__text-label {\n    @include typography.theme-styles($typography-theme);\n  }\n}\n\n///\n/// Customizes the selected text label color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `hover`, `focus`, `disabled`.\n///\n/// @example\n///   @include selected-text-label-color(blue);\n///   @include selected-text-label-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The label's color or a state Map\n///\n@mixin selected-text-label-color(\n  $color-or-map,\n  $query: feature-targeting.all()\n) {\n  @include _is-selected() {\n    @include text-label-color($color-or-map, $query: $query);\n  }\n}\n\n@mixin _unselected-text-label-color($color-or-map) {\n  @include _is-unselected() {\n    @include text-label-color($color-or-map);\n  }\n}\n\n@mixin _text-label-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-evolution-chip__text-label {\n    @include feature-targeting.targets($feat-color) {\n      @if $color {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n}\n\n///\n/// Sets the type scale of the text label.\n/// @param {String} $type-scale - The type scale of the text label.\n///\n@mixin text-label-type-scale($type-scale, $query: feature-targeting.all()) {\n  .mdc-evolution-chip__text-label {\n    @include typography.typography($type-scale, $query: $query);\n  }\n}\n\n///\n/// Sets the size of the graphic.\n/// @param {Number} $size - The size of the graphic.\n///\n@mixin graphic-size($size, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  // Expose the width as a readable custom property that can be used when\n  // computing the chip bounding client rect as an additive value for the chip\n  // width. This solves for selectable chips without icons growing/shrinking as\n  // they toggle their selected state. The ripple dimensions will have been\n  // computed based on the unselected bounding client react which will not have\n  // enough horizontal space to account for the growth in width.\n  &.mdc-evolution-chip--selectable:not(.mdc-evolution-chip--with-primary-icon) {\n    @if $size {\n      @include theme.property(--mdc-chip-graphic-selected-width, $size);\n    }\n  }\n\n  .mdc-evolution-chip__graphic {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $size);\n      @include theme.property(width, $size);\n      @include theme.property(font-size, $size);\n    }\n  }\n}\n\n///\n/// Customizes the icon color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `enabled`, `focus`, `disabled`.\n///\n/// @example\n///   @include icon-color(blue);\n///   @include icon-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The icon's color or a state Map\n///\n@mixin icon-color($color-or-map, $query: feature-targeting.all()) {\n  @include _icon-color(state.get-default-state($color-or-map), $query);\n\n  @include _is-enabled() {\n    @include _icon-color(state.get-enabled-state($color-or-map), $query);\n  }\n\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational):hover {\n    @include _icon-color(state.get-hover-state($color-or-map), $query);\n  }\n\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational) {\n    @include ripple-theme.focus() {\n      @include _icon-color(state.get-focus-state($color-or-map), $query);\n    }\n  }\n\n  @include _is-disabled() {\n    @include _icon-color(state.get-disabled-state($color-or-map), $query);\n  }\n}\n\n@mixin _selected-icon-color($color-or-map) {\n  @include checkmark-color($color-or-map);\n}\n\n@mixin _unselected-icon-color($color-or-map) {\n  @include _is-unselected() {\n    @include icon-color($color-or-map);\n  }\n}\n\n@mixin _icon-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-evolution-chip__icon--primary {\n    @include feature-targeting.targets($feat-color) {\n      @if $color {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n}\n\n///\n/// Customizes the icon container color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `hover`, `focus`, `disabled`.\n///\n/// @example\n///   @include icon-container-color(blue);\n///   @include icon-container-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The icon's container color or a state Map\n///\n@mixin icon-container-color($color-or-map, $query: feature-targeting.all()) {\n  @include _icon-container-color(\n    state.get-default-state($color-or-map),\n    $query\n  );\n\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational):hover {\n    @include _icon-container-color(\n      state.get-hover-state($color-or-map),\n      $query\n    );\n  }\n\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational) {\n    @include ripple-theme.focus() {\n      @include _icon-container-color(\n        state.get-focus-state($color-or-map),\n        $query\n      );\n    }\n  }\n\n  &.mdc-evolution-chip--disabled {\n    @include _icon-container-color(\n      state.get-disabled-state($color-or-map),\n      $query\n    );\n  }\n}\n\n@mixin _icon-container-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-evolution-chip__icon--primary {\n    @include feature-targeting.targets($feat-color) {\n      @if $color {\n        @include theme.property(background-color, $color);\n      }\n    }\n  }\n}\n\n///\n/// Sets the size of the icon.\n/// @param {Number} $size - The size of the icon.\n///\n@mixin icon-size($size, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-evolution-chip__icon--primary {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $size);\n      @include theme.property(width, $size);\n      @include theme.property(font-size, $size);\n    }\n  }\n}\n\n///\n/// Sets the size of the trailing action.\n/// @param {Number} $size - The size of the trailing action.\n///\n@mixin trailing-action-size($size, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-evolution-chip__icon--trailing {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $size);\n      @include theme.property(width, $size);\n      @include theme.property(font-size, $size);\n    }\n  }\n}\n\n///\n/// Customizes the trailing action color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `hover`, `focus`, `disabled`.\n///\n/// @example\n///   @include trailing-action-color(blue);\n///   @include trailing-action-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The trailing action's color or a state Map\n///\n@mixin trailing-action-color($color-or-map, $query: feature-targeting.all()) {\n  @include _trailing-action-color(\n    state.get-default-state($color-or-map),\n    $query\n  );\n\n  @include _is-enabled() {\n    @include _trailing-action-color(\n      state.get-enabled-state($color-or-map),\n      $query\n    );\n  }\n\n  .mdc-evolution-chip__action--trailing:hover {\n    @include _trailing-action-color(\n      state.get-hover-state($color-or-map),\n      $query\n    );\n  }\n\n  .mdc-evolution-chip__action--trailing {\n    @include ripple-theme.focus() {\n      @include _trailing-action-color(\n        state.get-focus-state($color-or-map),\n        $query\n      );\n    }\n  }\n\n  @include _is-disabled() {\n    @include _trailing-action-color(\n      state.get-disabled-state($color-or-map),\n      $query\n    );\n  }\n}\n\n@mixin _trailing-action-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-evolution-chip__icon--trailing {\n    @include feature-targeting.targets($feat-color) {\n      @if $color {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n}\n\n///\n/// Sets the size of the checkmark.\n/// @param {Number} $size - The size of the checkmark.\n///\n@mixin checkmark-size($size, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-evolution-chip__checkmark {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $size);\n      @include theme.property(width, $size);\n    }\n  }\n}\n\n///\n/// Customizes the checkmark color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `enabled`, `hover`, `focus`, `disabled`.\n///\n/// @example\n///   @include checkmark-color(blue);\n///   @include checkmark-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The checkmark's color or a state Map\n///\n@mixin checkmark-color($color-or-map, $query: feature-targeting.all()) {\n  @include _checkmark-color(state.get-default-state($color-or-map), $query);\n\n  @include _is-enabled() {\n    @include _checkmark-color(state.get-enabled-state($color-or-map), $query);\n  }\n\n  .mdc-evolution-chip__action--primary:not(.mdc-evolution-chip__action--presentational):hover {\n    @include _checkmark-color(state.get-hover-state($color-or-map), $query);\n  }\n\n  .mdc-evolution-chip__action--primary {\n    @include ripple-theme.focus() {\n      @include _checkmark-color(state.get-focus-state($color-or-map), $query);\n    }\n  }\n\n  @include _is-disabled() {\n    @include _checkmark-color(state.get-disabled-state($color-or-map), $query);\n  }\n}\n\n@mixin _checkmark-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-evolution-chip__checkmark {\n    @include feature-targeting.targets($feat-color) {\n      @if $color {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n}\n\n///\n/// Customizes the checkmark container color, using a Color or state Map.\n/// - To set only the default color, provide a single Color.\n/// - To set one or more state colors, provide a state Map with optional keys.\n/// - Supported state Map keys: `default`, `hover`, `focus`, `disabled`.\n///\n/// @example\n///   @include checkmark-container-color(blue);\n///   @include checkmark-container-color((disabled: gray));\n///\n/// @param {Color | Map} $color-or-map - The checkmark container's color or a state Map\n///\n@mixin checkmark-container-color(\n  $color-or-map,\n  $query: feature-targeting.all()\n) {\n  @include _checkmark-container-color(\n    state.get-default-state($color-or-map),\n    $query\n  );\n\n  &.mdc-evolution-chip--disabled {\n    @include _checkmark-container-color(\n      state.get-disabled-state($color-or-map),\n      $query\n    );\n  }\n}\n\n@mixin _checkmark-container-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-evolution-chip__checkmark-background {\n    @include feature-targeting.targets($feat-color) {\n      @if $color {\n        @include theme.property(background-color, $color);\n      }\n    }\n  }\n}\n\n///\n/// Sets the horizontal padding for the chip.\n/// @param {Number} $leading - The leading padding for the chip.\n/// @param {Number} $trailing [$leading] - The trailing padding for the chip.\n///\n@mixin horizontal-padding(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-evolution-chip__action--primary {\n    @include feature-targeting.targets($feat-structure) {\n      @include rtl.reflexive-property(padding, $leading, $trailing);\n    }\n  }\n}\n\n///\n/// Sets the horizontal padding for chips with a graphic.\n/// @param {Number} $graphic-leading - The leading padding for the graphic.\n/// @param {Number} $graphic-trailing - The trailing padding for the graphic.\n/// @param {Number} $primary-trailing - The trailing padding for the primary action.\n///\n@mixin with-graphic-horizontal-padding(\n  $graphic-leading,\n  $graphic-trailing,\n  $primary-trailing,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  &.mdc-evolution-chip--with-primary-graphic {\n    .mdc-evolution-chip__graphic {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(\n          padding,\n          $graphic-leading,\n          $graphic-trailing\n        );\n      }\n    }\n\n    .mdc-evolution-chip__action--primary {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(padding, 0, $primary-trailing);\n      }\n    }\n  }\n}\n\n///\n/// Sets the horizontal padding for chips with a trailing action.\n/// @param {Number} $primary-leading - The leading padding for the primary action.\n/// @param {Number} $trailing-action-leading - The leading padding for the trailing action.\n/// @param {Number} $trailing-action-trailing - The trailing padding for the trailing action.\n///\n@mixin with-trailing-action-horizontal-padding(\n  $primary-leading,\n  $trailing-action-leading,\n  $trailing-action-trailing,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  &.mdc-evolution-chip--with-trailing-action {\n    .mdc-evolution-chip__action--trailing {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(\n          padding,\n          $trailing-action-leading,\n          $trailing-action-trailing\n        );\n      }\n    }\n\n    #{$ripple-target-trailing} {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-position(left, $trailing-action-leading);\n      }\n    }\n\n    .mdc-evolution-chip__action--primary {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(padding, $primary-leading, 0);\n      }\n    }\n  }\n}\n\n///\n/// Sets the horizontal padding for chips with a graphic and trailing action.\n/// @param {Number} $graphic-leading - The leading padding for the graphic.\n/// @param {Number} $graphic-trailing - The trailing padding for the graphic.\n/// @param {Number} $trailing-action-leading - The leading padding for the trailing action.\n/// @param {Number} $trailing-action-trailing - The trailing padding for the trailing action.\n///\n@mixin with-graphic-and-trailing-action-horizontal-padding(\n  $graphic-leading,\n  $graphic-trailing,\n  $trailing-action-leading,\n  $trailing-action-trailing,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-evolution-chip--with-primary-graphic.mdc-evolution-chip--with-trailing-action {\n    .mdc-evolution-chip__graphic {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(\n          padding,\n          $graphic-leading,\n          $graphic-trailing\n        );\n      }\n    }\n\n    .mdc-evolution-chip__action--trailing {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(\n          padding,\n          $trailing-action-leading,\n          $trailing-action-trailing\n        );\n      }\n    }\n\n    #{$ripple-target-trailing} {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-position(left, $trailing-action-leading);\n      }\n    }\n\n    .mdc-evolution-chip__action--primary {\n      @include feature-targeting.targets($feat-structure) {\n        @include rtl.reflexive-property(padding, 0, 0);\n      }\n    }\n  }\n}\n\n@mixin _container-elevation($resolver, $shadow-color, $map) {\n  @include _is-enabled() {\n    @if (state.get-enabled-state($map)) {\n      @include elevation-theme.with-resolver(\n        $resolver,\n        $elevation: state.get-enabled-state($map),\n        $shadow-color: $shadow-color\n      );\n    }\n  }\n\n  @include ripple-theme.hover() {\n    @if state.get-hover-state($map) {\n      @include elevation-theme.with-resolver(\n        $resolver,\n        $elevation: state.get-hover-state($map),\n        $shadow-color: $shadow-color\n      );\n    }\n  }\n\n  @include ripple-theme.focus() {\n    @if (state.get-focus-state($map)) {\n      @include elevation-theme.with-resolver(\n        $resolver,\n        $elevation: state.get-focus-state($map),\n        $shadow-color: $shadow-color\n      );\n    }\n  }\n\n  @include ripple-theme.pressed() {\n    @if (state.get-pressed-state($map)) {\n      @include elevation-theme.with-resolver(\n        $resolver,\n        $elevation: state.get-pressed-state($map),\n        $shadow-color: $shadow-color\n      );\n    }\n  }\n\n  @include _is-disabled() {\n    @if (state.get-disabled-state($map)) {\n      @include elevation-theme.with-resolver(\n        $resolver,\n        $elevation: state.get-disabled-state($map),\n        $shadow-color: $shadow-color\n      );\n    }\n  }\n}\n\n@mixin _selected-container-elevation($resolver, $shadow-color, $map) {\n  @include _is-selected() {\n    @include _container-elevation($resolver, $shadow-color, $map);\n  }\n}\n\n@mixin _unselected-container-elevation($resolver, $shadow-color, $map) {\n  @include _is-unselected() {\n    @include _container-elevation($resolver, $shadow-color, $map);\n  }\n}\n\n@mixin _is-enabled() {\n  &:not(.mdc-evolution-chip--disabled) {\n    @content;\n  }\n}\n\n@mixin _is-disabled() {\n  &.mdc-evolution-chip--disabled {\n    @content;\n  }\n}\n\n@mixin _is-selected() {\n  &.mdc-evolution-chip--selected {\n    @content;\n  }\n}\n\n@mixin _is-unselected() {\n  &:not(.mdc-evolution-chip--selected) {\n    @content;\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:list';\n@use 'sass:meta';\n@use 'sass:selector';\n@use '@material/theme/gss';\n@use '@material/theme/selector-ext';\n@use '@material/theme/theme';\n\n$include: true !default;\n\n/// Creates a rule that will be applied when a component is within the context\n/// of an RTL layout.\n///\n/// @example - scss\n/// .mdc-foo {\n///   padding-left: 4px;\n///\n///   @include rtl {\n///     padding-left: auto;\n///     padding-right: 4px;\n///   }\n/// }\n///\n/// @example - css\n///   .mdc-foo {\n///     padding-left: 4px;\n///   }\n///\n///   [dir=\"rtl\"] .mdc-foo,\n///   .mdc-foo[dir=\"rtl\"] {\n///     padding-left: auto;\n///     padding-right: 4px;\n///   }\n///\n/// Note that this mixin works by checking for an ancestor element with\n/// `[dir=\"rtl\"]`. As a result, nested `dir` values are not supported:\n///\n/// @example - html\n/// <html dir=\"rtl\">\n///   <!-- ... -->\n///   <div dir=\"ltr\">\n///     <div class=\"mdc-foo\">Styled incorrectly as RTL!</div>\n///   </div>\n/// </html>\n///\n/// In the future, selectors such as the `:dir` pseudo-class\n/// (http://mdn.io/css/:dir) will help us mitigate this.\n///\n/// @content Content to be styled in an RTL context.\n@mixin rtl() {\n  @if ($include) {\n    $dir-rtl: '[dir=rtl]';\n\n    $rtl-selectors: list.join(\n      selector.nest($dir-rtl, &),\n      selector-ext.append-strict(&, $dir-rtl)\n    );\n\n    @at-root {\n      #{$rtl-selectors} {\n        /*rtl:begin:ignore*/\n        @content;\n        /*rtl:end:ignore*/\n      }\n    }\n  }\n}\n\n// Takes a base box-model property name (`margin`, `border`, `padding`, etc.) along with a\n// default direction (`left` or `right`) and value, and emits rules which apply the given value to the\n// specified direction by default and the opposite direction in RTL.\n//\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, left, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 8px;\n//   margin-right: 0;\n//\n//   @include rtl {\n//     margin-left: 0;\n//     margin-right: 8px;\n//   }\n// }\n// ```\n//\n// whereas:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, right, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 0;\n//   margin-right: 8px;\n//\n//   @include rtl {\n//     margin-left: 8px;\n//     margin-right: 0;\n//   }\n// }\n// ```\n//\n// You can also pass an optional 4th `$root-selector` argument which will be forwarded to `mdc-rtl`,\n// e.g. `@include rtl-reflexive-box(margin, left, 8px, '.mdc-component')`.\n//\n// Note that this function will always zero out the original value in an RTL context.\n// If you're trying to flip the values, use `mdc-rtl-reflexive-property()` instead.\n@mixin reflexive-box(\n  $base-property,\n  $default-direction,\n  $value,\n  $replace: null\n) {\n  @if (list.index((right, left), $default-direction) == null) {\n    @error \"Invalid default direction: '#{$default-direction}'. Please specifiy either 'right' or 'left'.\";\n  }\n\n  $left-value: $value;\n  $right-value: 0;\n\n  @if ($default-direction == right) {\n    $left-value: 0;\n    $right-value: $value;\n  }\n\n  @include reflexive-property(\n    $base-property,\n    $left-value,\n    $right-value,\n    $replace: $replace\n  );\n}\n\n// Takes a base property and emits rules that assign <base-property>-left to <left-value> and\n// <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-property(margin, auto, 12px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: auto;\n//   margin-right: 12px;\n//\n//   @include rtl {\n//     margin-left: 12px;\n//     margin-right: auto;\n//   }\n// }\n// ```\n//\n// An optional 4th `$root-selector` argument can be given, which will be passed to `mdc-rtl`.\n@mixin reflexive-property(\n  $base-property,\n  $left-value,\n  $right-value,\n  $replace: null\n) {\n  $prop-left: #{$base-property}-left;\n  $prop-right: #{$base-property}-right;\n\n  @include reflexive(\n    $prop-left,\n    $left-value,\n    $prop-right,\n    $right-value,\n    $replace: $replace\n  );\n}\n\n// Takes an argument specifying a horizontal position property (either 'left' or 'right') as well\n// as a value, and applies that value to the specified position in a LTR context, and flips it in a\n// RTL context. For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-position(left, 0);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 0;\n//   right: initial;\n//\n//   @include rtl {\n//     left: initial;\n//     right: 0;\n//   }\n// }\n// ```\n//\n// An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive-position($position-property, $value, $replace: null) {\n  @if (list.index((right, left), $position-property) == null) {\n    @error \"Invalid position #{position-property}. Please specifiy either right or left\";\n  }\n\n  // TODO: 'initial' is not supported in IE 11. https://caniuse.com/#feat=css-initial-value\n  $left-value: $value;\n  $right-value: initial;\n\n  @if ($position-property == right) {\n    $right-value: $value;\n    $left-value: initial;\n  }\n\n  @include reflexive(\n    left,\n    $left-value,\n    right,\n    $right-value,\n    $replace: $replace\n  );\n}\n\n// Takes pair of properties with values as arguments and flips it in RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive(left, 2px, right, 5px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 2px;\n//   right: 5px;\n//\n//   @include rtl {\n//     right: 2px;\n//     left: 5px;\n//   }\n// }\n// ```\n//\n// An optional fifth `$root-selector` argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive(\n  $left-property,\n  $left-value,\n  $right-property,\n  $right-value,\n  $replace: null\n) {\n  $left-replace: null;\n  $right-replace: null;\n  @if $replace {\n    @if meta.type-of($left-value) == 'string' {\n      $left-replace: $replace;\n    }\n\n    @if meta.type-of($right-value) == 'string' {\n      $right-replace: $replace;\n    }\n\n    @if $left-replace == null and $right-replace == null {\n      @error 'mdc-rtl: $replace may only be used with strings but neither left nor right values are strings.';\n    }\n\n    // If any replacements are null, treat the entire value as null (do not\n    // emit anything).\n    @each $name, $replacement in $replace {\n      @if $replacement == null {\n        $left-value: null;\n        $right-value: null;\n      }\n    }\n  }\n\n  // Do not emit if either value are null\n  @if $left-value and $right-value {\n    @include _property($left-property, $left-value, $replace: $left-replace);\n    @include _property($right-property, $right-value, $replace: $right-replace);\n\n    @include rtl {\n      @include _property(\n        $left-property,\n        $right-value,\n        $replace: $right-replace\n      );\n      @include _property($right-property, $left-value, $replace: $left-replace);\n    }\n  }\n}\n\n///\n/// Adds RTL ignore annotation when `$mdc-rtl-include` is true.\n///\n@mixin ignore-next-line() {\n  @include gss.annotate(\n    (\n      noflip: $include,\n    )\n  );\n}\n\n///\n/// Adds `@noflip` annotation when `$mdc-rtl-include` is true.\n///\n/// @param {String} $property\n/// @param {String} $value\n/// @param {Map} $replace\n///\n@mixin _property($property, $value, $replace: null) {\n  @include theme.property(\n    $property,\n    $value,\n    $replace: $replace,\n    $gss: (noflip: $include)\n  );\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use 'sass:math';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:string';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/theme/custom-properties';\n@use '@material/theme/keys';\n@use '@material/theme/theme';\n\n/// @deprecated Avoid calling this function directly. Instead, configure the\n/// `$styles-<style>` variable Maps.\n@function set-styles_($base-styles, $scale-styles, $override-styles) {\n  $options: (\n    custom-property-prefix: typography,\n  );\n\n  $base-styles: keys.set-values($base-styles, $options: $options);\n\n  @each $style, $style-props in $scale-styles {\n    @each $base-key in map.keys($base-styles) {\n      // Ignore the return result, it's not needed\n      $unused: keys.add-link(keys.combine($style, $base-key), $base-key);\n    }\n\n    // Merge base properties for all styles.\n    $style-props: map.merge($base-styles, $style-props);\n\n    // Merge overrides onto each style.\n    $style-props: map.merge($style-props, map.get($override-styles, $style));\n\n    // Register keys for this style\n    @each $property, $value in $style-props {\n      $unused: keys.set-value(\n        keys.combine($style, $property),\n        $value,\n        $options: $options\n      );\n    }\n\n    // Override original styles with new styles.\n    $scale-styles: map.merge($scale-styles, (#{$style}: $style-props));\n  }\n\n  @return $scale-styles;\n}\n\n@function get-letter-spacing_($tracking, $font-size) {\n  @return math.div($tracking, $font-size * 16) * 1em;\n}\n\n@function px-to-rem($px) {\n  @if custom-properties.is-custom-prop($px) {\n    @return custom-properties.set-fallback(\n      $px,\n      _px-to-rem(custom-properties.get-fallback($px))\n    );\n  }\n  @return _px-to-rem($px);\n}\n\n@function _px-to-rem($px) {\n  @if $px == null {\n    @return null;\n  }\n  @return math.div($px, 16px) * 1rem;\n}\n\n$font-family: string.unquote('Roboto, sans-serif') !default;\n\n// Override styles\n$styles-headline1: () !default;\n$styles-headline2: () !default;\n$styles-headline3: () !default;\n$styles-headline4: () !default;\n$styles-headline5: () !default;\n$styles-headline6: () !default;\n$styles-subtitle1: () !default;\n$styles-subtitle2: () !default;\n$styles-body1: () !default;\n$styles-body2: () !default;\n$styles-caption: () !default;\n$styles-button: () !default;\n$styles-overline: () !default;\n\n/// @deprecated Do not override this variable. Use the $styles-<style> override\n/// Map variables instead, or $font-family to set the base font family.\n$base: (\n  font-family: $font-family,\n) !default;\n\n$font-weight-values: (\n  thin: 100,\n  light: 300,\n  regular: 400,\n  medium: 500,\n  bold: 700,\n  black: 900,\n) !default;\n\n/// @deprecated Do not override this variable. Use the $styles-<style> override\n/// Map variables instead.\n$styles: set-styles_(\n  $base,\n  (\n    headline1: (\n      font-size: px-to-rem(96px),\n      line-height: px-to-rem(96px),\n      font-weight: map.get($font-weight-values, light),\n      letter-spacing: get-letter-spacing_(-1.5, 6),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline2: (\n      font-size: px-to-rem(60px),\n      line-height: px-to-rem(60px),\n      font-weight: map.get($font-weight-values, light),\n      letter-spacing: get-letter-spacing_(-0.5, 3.75),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline3: (\n      font-size: px-to-rem(48px),\n      line-height: px-to-rem(50px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: normal,\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline4: (\n      font-size: px-to-rem(34px),\n      line-height: px-to-rem(40px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.25, 2.125),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline5: (\n      font-size: px-to-rem(24px),\n      line-height: px-to-rem(32px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: normal,\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    headline6: (\n      font-size: px-to-rem(20px),\n      line-height: px-to-rem(32px),\n      font-weight: map.get($font-weight-values, medium),\n      letter-spacing: get-letter-spacing_(0.25, 1.25),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    subtitle1: (\n      font-size: px-to-rem(16px),\n      line-height: px-to-rem(28px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.15, 1),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    subtitle2: (\n      font-size: px-to-rem(14px),\n      line-height: px-to-rem(22px),\n      font-weight: map.get($font-weight-values, medium),\n      letter-spacing: get-letter-spacing_(0.1, 0.875),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    body1: (\n      font-size: px-to-rem(16px),\n      line-height: px-to-rem(24px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.5, 1),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    body2: (\n      font-size: px-to-rem(14px),\n      line-height: px-to-rem(20px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.25, 0.875),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    caption: (\n      font-size: px-to-rem(12px),\n      line-height: px-to-rem(20px),\n      font-weight: map.get($font-weight-values, regular),\n      letter-spacing: get-letter-spacing_(0.4, 0.75),\n      text-decoration: inherit,\n      text-transform: inherit,\n    ),\n    button: (\n      font-size: px-to-rem(14px),\n      line-height: px-to-rem(36px),\n      font-weight: map.get($font-weight-values, medium),\n      letter-spacing: get-letter-spacing_(1.25, 0.875),\n      text-decoration: none,\n      text-transform: uppercase,\n    ),\n    overline: (\n      font-size: px-to-rem(12px),\n      line-height: px-to-rem(32px),\n      font-weight: map.get($font-weight-values, medium),\n      letter-spacing: get-letter-spacing_(2, 0.75),\n      text-decoration: none,\n      text-transform: uppercase,\n    ),\n  ),\n  (\n    headline1: $styles-headline1,\n    headline2: $styles-headline2,\n    headline3: $styles-headline3,\n    headline4: $styles-headline4,\n    headline5: $styles-headline5,\n    headline6: $styles-headline6,\n    subtitle1: $styles-subtitle1,\n    subtitle2: $styles-subtitle2,\n    body1: $styles-body1,\n    body2: $styles-body2,\n    caption: $styles-caption,\n    button: $styles-button,\n    overline: $styles-overline,\n  )\n) !default;\n\n// A copy of the styles Map that is used to detect compile-time changes for\n// Angular support.\n$_styles-copy: $styles;\n\n@function is-typography-style($style) {\n  @return map.has-key($styles, $style);\n}\n\n@function get-typography-styles() {\n  @return map.keys($styles);\n}\n\n@mixin core-styles($query: feature-targeting.all()) {\n  .mdc-typography {\n    @include base($query: $query);\n  }\n\n  @each $style in get-typography-styles() {\n    .mdc-typography--#{$style} {\n      @include typography($style, $query: $query);\n    }\n  }\n}\n\n@mixin base($query: feature-targeting.all()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  @include smooth-font($query: $query);\n  @include feature-targeting.targets($feat-typography) {\n    @include theme.property(font-family, font-family);\n  }\n}\n\n@mixin typography($style, $query: feature-targeting.all(), $exclude-props: ()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  @if not is-typography-style($style) {\n    @error \"Invalid style specified! #{$style} doesn't exist. Choose one of #{get-typography-styles()}\";\n  }\n\n  @include smooth-font($query: $query);\n  @include feature-targeting.targets($feat-typography) {\n    @each $key in keys.get-keys($style) {\n      // <style>-<property>: headline1-font-size\n      // Slice the string past the first key separator to retrieve the\n      // property name\n      $property: string.slice($key, string.index($key, '-') + 1);\n      @if list.index($exclude-props, $property) == null {\n        $current-global-value: map.get($styles, $style, $property);\n        $configured-global-value: map.get($_styles-copy, $style, $property);\n        @if $current-global-value != $configured-global-value {\n          // A compile time change was made to $mdc-typography-styles. To\n          // support Angular, use this value instead of the key's value.\n          @if $current-global-value {\n            // Only emit if the overridden value exists\n            $custom-prop: keys.create-custom-property($key);\n            $custom-prop: custom-properties.set-fallback(\n              $custom-prop,\n              $current-global-value\n            );\n            @include theme.property($property, $custom-prop);\n          }\n        } @else {\n          // Otherwise, use the key, which may be different from the original\n          // configured global value.\n          @include theme.property($property, $key);\n        }\n      }\n    }\n  }\n}\n\n/// Applies antialiasing via font-smoothing to text.\n@mixin smooth-font($query: feature-targeting.all()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  @include feature-targeting.targets($feat-typography) {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n// Element must be `display: block` or `display: inline-block` for this to work.\n@mixin overflow-ellipsis($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n/// Sets a container's baseline that text content will align to.\n///\n/// If the `$display` is set to a flexbox display, only `$top` baseline may be\n/// set. A separate element must be added as a child of the container with a\n/// `$bottom` baseline.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text's baseline.\n/// @param {Number} $bottom - the distance from the text's baseline to the\n///     bottom of the container.\n/// @param {String} $display - the display type of the container. May be `flex`,\n///     `inline-flex`, `block`, or `inline-block`.\n@mixin baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $query: feature-targeting.all()\n) {\n  $validDisplayTypes: (flex, inline-flex, block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error \"mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}\";\n  }\n\n  $isFlexbox: $display == 'flex' or $display == 'inline-flex';\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    display: $display;\n\n    @if $isFlexbox {\n      align-items: baseline;\n    }\n  }\n\n  @if $top > 0 {\n    @include baseline-top($top, $query: $query);\n  }\n\n  @if $bottom > 0 {\n    @if $isFlexbox {\n      @error \"mdc-typography: invalid baseline with display type. #{$display} cannot specifiy $bottom. Add a separate child element with its own $bottom.\";\n    }\n\n    @include baseline-bottom($bottom, $query: $query);\n  }\n}\n\n/// Sets the baseline of flow text content.\n///\n/// Separate `$top` and `$bottom` baselines may be specified. You should ensure\n/// that the `$top` baseline matches the previous text content's $bottom\n/// baseline to ensure text is positioned appropriately.\n///\n/// See go/css-baseline for reference on how this mixin works.\n///\n/// This is intended for text flow content only (e.g. `<h1>`, `<p>`, `<span>`,\n/// or `<div>` with only text content). Use `baseline()` to set the baseline of\n/// containers that are flexbox or have non-flow content children.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text's baseline.\n/// @param {Number} $bottom - the distance from the text's baseline to the\n///     bottom of the container.\n/// @param {Boolean} $lineHeight - the line-height to use for the text. This\n///     is the distance between baselines of multiple lines of text.\n/// @param {String} $display - the display type of the container. May be `block`\n///     or `inline-block`.\n@mixin text-baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $lineHeight: normal,\n  $query: feature-targeting.all()\n) {\n  $validDisplayTypes: (block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error \"mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}\";\n  }\n\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include baseline(\n    $display: $display,\n    $top: $top,\n    $bottom: $bottom,\n    $query: $query\n  );\n  @include feature-targeting.targets($feat-structure) {\n    @if $top > 0 {\n      margin-top: 0;\n      /* @alternate */\n      line-height: #{$lineHeight};\n    }\n\n    @if $bottom > 0 {\n      margin-bottom: -1 * $bottom;\n    }\n  }\n}\n\n/// Creates a baseline strut from the top of a container. This mixin is for\n/// advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the top of the container to\n///     the text's baseline.\n@mixin baseline-top($distance, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: 0;\n    }\n  }\n}\n\n/// Creates a baseline strut from the baseline to the bottom of a container.\n/// This mixin is for advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the text's baseline to the\n///     bottom of the container.\n@mixin baseline-bottom($distance, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  &::after {\n    @include feature-targeting.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: -1 * $distance;\n    }\n  }\n}\n\n/// Adds an invisible, zero-width prefix to a container's text.\n/// This ensures that the baseline is always where the text would be, instead\n/// of defaulting to the container bottom when text is empty. Do not use this\n/// mixin if the `baseline` mixin is already applied.\n@mixin zero-width-prefix($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting.targets($feat-structure) {\n      content: '\\200b';\n    }\n  }\n}\n\n@mixin baseline-strut_($distance) {\n  display: inline-block;\n  width: 0;\n  height: $distance;\n  content: '';\n}\n\n@function get-font($typography) {\n  @return map.get($styles, $typography, font-family);\n}\n\n@function get-line-height($typography) {\n  @return map.get($styles, $typography, line-height);\n}\n\n@function get-size($typography) {\n  @return map.get($styles, $typography, font-size);\n}\n\n@function get-weight($typography) {\n  @return map.get($styles, $typography, font-weight);\n}\n\n@function get-tracking($typography) {\n  @return map.get($styles, $typography, letter-spacing);\n}\n\n$_typography-theme: (\n  font: null,\n  line-height: null,\n  size: null,\n  weight: null,\n  tracking: null,\n);\n\n@mixin theme-styles($theme) {\n  @include theme.validate-theme-keys($_typography-theme, $theme);\n\n  @include theme.property(font-family, map.get($theme, font));\n  @include theme.property(line-height, map.get($theme, line-height));\n  @include theme.property(font-size, map.get($theme, size));\n  @include theme.property(font-weight, map.get($theme, weight));\n  @include theme.property(letter-spacing, map.get($theme, tracking));\n}\n","// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n@use '@material/feature-targeting/feature-targeting';\n///\n/// Emits necessary layout styles to set a transparent border around an element\n/// without interfering with the rest of its component layout. The border is\n/// only visible in high-contrast mode. The target element should be a child of\n/// a relatively positioned top-level element (i.e. a ::before pseudo-element).\n///\n/// @param {number} $border-width - The width of the transparent border.\n/// @param {string} $border-style - The style of the transparent border.\n///\n@mixin transparent-border(\n  $border-width: 1px,\n  $border-style: solid,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    position: absolute;\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    border: $border-width $border-style transparent;\n    border-radius: inherit;\n    content: '';\n    pointer-events: none;\n  }\n\n  // Used to satisfy Firefox v94 which does not render transparent borders in HCM (b/206440838).\n  @include forced-colors-mode($exclude-ie11: true) {\n    @include feature-targeting.targets($feat-structure) {\n      border-color: CanvasText;\n    }\n  }\n}\n\n///\n/// Visually hides text content for accessibility. This text should only be\n/// visible to screen reader users.\n/// See https://a11yproject.com/posts/how-to-hide-content/\n///\n@mixin visually-hidden($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap; /* added line */\n    width: 1px;\n  }\n}\n\n/// Selects for IE11 support.\n///\n/// @content styles to emit for IE11 support\n@mixin ie11-support {\n  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    @content;\n  }\n}\n\n/// Selects for `forced-colors` high contrast mode.\n///\n/// While in `forced-colors` mode, only system colors should be used.\n///\n/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#system_colors\n/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\n/// @content styles to emit in `forced-colors` mode\n@mixin forced-colors-mode($exclude-ie11: false) {\n  @if $exclude-ie11 {\n    @media screen and (forced-colors: active) {\n      @content;\n    }\n  } @else {\n    @media screen and (forced-colors: active), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n","//\n// Copyright 2021 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/rtl/rtl';\n@use '@material/dom/dom';\n\n$ring-radius-default: 8px !default;\n$inner-ring-width-default: 2px !default;\n$inner-ring-color-default: transparent !default;\n$outer-ring-width-default: 2px !default;\n$outer-ring-color-default: transparent !default;\n$container-outer-padding-default: 2px !default;\n\n/// Styles applied to the component's inner focus ring element.\n///\n/// @param $ring-radius [$ring-radius-default] - Focus ring radius.\n/// @param $inner-ring-width [$inner-ring-width-default] - Inner focus ring width.\n/// @param $inner-ring-color [$inner-ring-color-default] - Inner focus ring color.\n/// @param $outer-ring-width [$outer-ring-width-default] - Outer focus ring width.\n/// @param $outer-ring-color [$outer-ring-color-default] - Outer focus ring color.\n/// @param $container-outer-padding [$container-outer-padding-default] - The\n///     distance between the focus ring and the container.\n@mixin focus-ring(\n  $query: feature-targeting.all(),\n  $ring-radius: $ring-radius-default,\n  $inner-ring-width: $inner-ring-width-default,\n  $inner-ring-color: $inner-ring-color-default,\n  $outer-ring-width: $outer-ring-width-default,\n  $outer-ring-color: $outer-ring-color-default,\n  $container-outer-padding-vertical: $container-outer-padding-default,\n  $container-outer-padding-horizontal: $container-outer-padding-default\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  $container-size-vertical: 100%;\n  @if $container-outer-padding-vertical != 0 {\n    $container-size-vertical: calc(\n      100% + #{$container-outer-padding-vertical * 2}\n    );\n  }\n  $container-size-horizontal: 100%;\n  @if $container-outer-padding-horizontal != 0 {\n    $container-size-horizontal: calc(\n      100% + #{$container-outer-padding-horizontal * 2}\n    );\n  }\n  $outer-ring-size: 100%;\n  @if $outer-ring-width > 0 {\n    $outer-ring-size: calc(100% + #{$outer-ring-width * 2});\n  }\n  @include feature-targeting.targets($feat-structure) {\n    pointer-events: none;\n    border: $inner-ring-width solid $inner-ring-color;\n    border-radius: $ring-radius - $outer-ring-width;\n    box-sizing: content-box;\n    position: absolute;\n    top: 50%;\n    @include rtl.ignore-next-line();\n    left: 50%;\n    @include rtl.ignore-next-line();\n    transform: translate(-50%, -50%);\n    height: $container-size-vertical;\n    width: $container-size-horizontal;\n\n    @include dom.forced-colors-mode($exclude-ie11: true) {\n      border-color: CanvasText;\n    }\n\n    &::after {\n      content: '';\n      border: $outer-ring-width solid $outer-ring-color;\n      border-radius: $ring-radius;\n      display: block;\n      position: absolute;\n      top: 50%;\n      @include rtl.ignore-next-line();\n      left: 50%;\n      @include rtl.ignore-next-line();\n      transform: translate(-50%, -50%);\n      height: $outer-ring-size;\n      width: $outer-ring-size;\n\n      @include dom.forced-colors-mode($exclude-ie11: true) {\n        border-color: CanvasText;\n      }\n    }\n  }\n}\n/// Customizes the color of the button focus ring.\n///\n/// @param $inner-ring-color [$inner-ring-color-default] - Inner focus ring color.\n/// @param $outer-ring-width [$outer-ring-width-default] - Outer focus ring width.\n@mixin focus-ring-color(\n  $inner-ring-color: $inner-ring-color-default,\n  $outer-ring-color: $outer-ring-color-default\n) {\n  border-color: $inner-ring-color;\n\n  &::after {\n    border-color: $outer-ring-color;\n  }\n}\n\n/// Customizes the border radius of the button focus ring.\n///\n/// @param {Number} $ring-radius - The border radius of the focus ring.\n/// @param {Number} $outer-ring-width [$outer-ring-width] - Width of the outer\n///     ring, required to compute the radius for the inner ring.\n@mixin focus-ring-radius(\n  $ring-radius,\n  $outer-ring-width: $outer-ring-width-default,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    border-radius: $ring-radius - $outer-ring-width;\n\n    &::after {\n      border-radius: $ring-radius;\n    }\n  }\n}\n","//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use 'sass:color';\n@use 'sass:map';\n@use '@material/animation/functions' as functions2;\n@use '@material/animation/variables' as variables2;\n@use '@material/base/mixins' as base-mixins;\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/theme/css';\n@use '@material/theme/custom-properties';\n@use '@material/theme/theme';\n@use '@material/theme/keys';\n@use '@material/theme/shadow-dom';\n@use '@material/theme/theme-color';\n\n$custom-property-prefix: 'ripple';\n\n$fade-in-duration: 75ms !default;\n$fade-out-duration: 150ms !default;\n$translate-duration: 225ms !default;\n$states-wash-duration: 15ms !default;\n\n// Notes on states:\n// * focus takes precedence over hover (i.e. if an element is both focused and hovered, only focus value applies)\n// * press state applies to a separate pseudo-element, so it has an additive effect on top of other states\n// * selected/activated are applied additively to hover/focus via calculations at preprocessing time\n\n$dark-ink-opacities: (\n  hover: 0.04,\n  focus: 0.12,\n  press: 0.12,\n  selected: 0.08,\n  activated: 0.12,\n) !default;\n\n$light-ink-opacities: (\n  hover: 0.08,\n  focus: 0.24,\n  press: 0.24,\n  selected: 0.16,\n  activated: 0.24,\n) !default;\n\n// Legacy\n\n$pressed-dark-ink-opacity: 0.16 !default;\n$pressed-light-ink-opacity: 0.32 !default;\n\n// State selector variables used for state selector mixins below.\n$_hover-selector: '&:hover';\n$_focus-selector: '&.mdc-ripple-upgraded--background-focused, &:not(.mdc-ripple-upgraded):focus';\n$_active-selector: '&:not(:disabled):active';\n\n$light-theme: (\n  focus-state-layer-color: theme-color.$on-surface,\n  focus-state-layer-opacity: map.get($dark-ink-opacities, focus),\n  hover-state-layer-color: theme-color.$on-surface,\n  hover-state-layer-opacity: map.get($dark-ink-opacities, hover),\n  pressed-state-layer-color: theme-color.$on-surface,\n  pressed-state-layer-opacity: map.get($dark-ink-opacities, press),\n);\n\n@mixin theme($theme) {\n  @include keys.declare-custom-properties(\n    $theme,\n    $prefix: $custom-property-prefix\n  );\n\n  @if shadow-dom.$css-selector-fallback-declarations {\n    .mdc-ripple-surface {\n      @include theme-styles($theme);\n    }\n  }\n}\n\n$_ripple-theme: (\n  hover-state-layer-color: null,\n  focus-state-layer-color: null,\n  pressed-state-layer-color: null,\n  hover-state-layer-opacity: null,\n  focus-state-layer-opacity: null,\n  pressed-state-layer-opacity: null,\n);\n\n@mixin theme-styles($theme, $ripple-target: '&') {\n  $theme: keys.create-theme-properties(\n    $theme,\n    $prefix: $custom-property-prefix\n  );\n\n  // TODO(b/191298796): Support states layer color for every interactive states.\n  // Use only hover state layer color, ignoring focus and pressed color.\n  @include internal-theme-styles($theme, $ripple-target);\n}\n\n@mixin internal-theme-styles($theme, $ripple-target: '&') {\n  @include theme.validate-theme-keys($_ripple-theme, $theme);\n\n  @include states-base-color(\n    map.get($theme, hover-state-layer-color),\n    $ripple-target: $ripple-target\n  );\n  @include states-hover-opacity(\n    map.get($theme, hover-state-layer-opacity),\n    $ripple-target: $ripple-target\n  );\n  @include states-focus-opacity(\n    map.get($theme, focus-state-layer-opacity),\n    $ripple-target: $ripple-target\n  );\n  @include states-press-opacity(\n    map.get($theme, pressed-state-layer-opacity),\n    $ripple-target: $ripple-target\n  );\n}\n\n@mixin states-base-color(\n  $color,\n  $query: feature-targeting.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  @if $color {\n    @if not custom-properties.is-custom-prop($color) {\n      $color: custom-properties.create(\n        ripple-color,\n        theme-color.get-custom-property($color)\n      );\n    }\n\n    #{$ripple-target}::before,\n    #{$ripple-target}::after {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(background-color, $color);\n      }\n    }\n  }\n}\n\n///\n/// Customizes ripple opacities in `hover`, `focus`, or `press` states\n/// @param {map} $opacity-map - map specifying custom opacity of zero or more states\n/// @param {bool} $has-nested-focusable-element - whether the component contains a focusable element in the root\n/// @param {string} $ripple-target - the optional selector for the ripple element\n///\n@mixin states-opacities(\n  $opacity-map: (),\n  $has-nested-focusable-element: false,\n  $ripple-target: '&',\n  $query: feature-targeting.all()\n) {\n  // Ensure sufficient specificity to override base state opacities\n  @if map.get($opacity-map, hover) {\n    @include states-hover-opacity(\n      map.get($opacity-map, hover),\n      $ripple-target: $ripple-target,\n      $query: $query\n    );\n  }\n\n  @if map.get($opacity-map, focus) {\n    @include states-focus-opacity(\n      map.get($opacity-map, focus),\n      $ripple-target: $ripple-target,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $query: $query\n    );\n  }\n\n  @if map.get($opacity-map, press) {\n    @include states-press-opacity(\n      map.get($opacity-map, press),\n      $ripple-target: $ripple-target,\n      $query: $query\n    );\n  }\n}\n\n@mixin states-hover-opacity(\n  $opacity,\n  $query: feature-targeting.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  @if $opacity and not custom-properties.is-custom-prop($opacity) {\n    $opacity: custom-properties.create(ripple-hover-opacity, $opacity);\n  }\n\n  // Background wash styles, for both CSS-only and upgraded stateful surfaces\n  &:hover,\n  &.mdc-ripple-surface--hover {\n    @include states-background-selector($ripple-target) {\n      // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(opacity, $opacity);\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity(\n  $opacity,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting.all(),\n  $ripple-target: '&'\n) {\n  // Focus overrides hover by reusing the ::before pseudo-element.\n  // :focus-within generally works on non-MS browsers and matches when a *child* of the element has focus.\n  // It is useful for cases where a component has a focusable element within the root node, e.g. text field,\n  // but undesirable in general in case of nested stateful components.\n  // We use a modifier class for JS-enabled surfaces to support all use cases in all browsers.\n  @if $has-nested-focusable-element {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    &.mdc-ripple-upgraded:focus-within,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus,\n    &:not(.mdc-ripple-upgraded):focus-within {\n      @include states-background-selector($ripple-target) {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity,\n          $query: $query\n        );\n      }\n    }\n  } @else {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus {\n      @include states-background-selector($ripple-target) {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity,\n          $query: $query\n        );\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity-properties_($opacity, $query) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n  // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n  $feat-color: feature-targeting.create-target($query, color);\n\n  @if $opacity {\n    @if not custom-properties.is-custom-prop($opacity) {\n      $opacity: custom-properties.create(ripple-focus-opacity, $opacity);\n    }\n\n    // Note that this duration is only effective on focus, not blur\n    @include feature-targeting.targets($feat-animation) {\n      transition-duration: 75ms;\n    }\n\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(opacity, $opacity);\n    }\n  }\n}\n\n@mixin states-press-opacity(\n  $opacity,\n  $query: feature-targeting.all(),\n  $ripple-target: '&'\n) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n  $feat-color: feature-targeting.create-target($query, color);\n\n  // Styles for non-upgraded (CSS-only) stateful surfaces\n\n  @if $opacity {\n    @if not custom-properties.is-custom-prop($opacity) {\n      $opacity: custom-properties.create(ripple-press-opacity, $opacity);\n    }\n\n    &:not(.mdc-ripple-upgraded) {\n      // Apply press additively by using the ::after pseudo-element\n      #{$ripple-target}::after {\n        @include feature-targeting.targets($feat-animation) {\n          transition: opacity $fade-out-duration linear;\n        }\n      }\n\n      &:active {\n        #{$ripple-target}::after {\n          @include feature-targeting.targets($feat-animation) {\n            transition-duration: $fade-in-duration;\n          }\n\n          // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n          @include feature-targeting.targets($feat-color) {\n            @include theme.property(opacity, $opacity);\n          }\n        }\n      }\n    }\n\n    &.mdc-ripple-upgraded {\n      @include feature-targeting.targets($feat-color) {\n        // Upgraded ripple should always emit custom property, regardless of\n        // configuration, since ripple itself feature detects custom property\n        // support at runtime.\n        @include custom-properties.configure($emit-custom-properties: true) {\n          @include theme.property(\n            custom-properties.create(ripple-fg-opacity, $opacity)\n          );\n        }\n      }\n    }\n  }\n}\n\n// Simple mixin for base states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states(\n  $color: theme-color.prop-value(on-surface),\n  $has-nested-focusable-element: false,\n  $query: feature-targeting.all(),\n  $ripple-target: '&',\n  $opacity-map: null\n) {\n  @include states-interactions_(\n    $color: $color,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $query: $query,\n    $ripple-target: $ripple-target,\n    $opacity-map: $opacity-map\n  );\n}\n\n// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-activated(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n  $activated-opacity: states-opacity($color, activated);\n\n  &--activated {\n    // Stylelint seems to think that '&' qualifies as a type selector here?\n    @include states-background-selector($ripple-target) {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(\n          opacity,\n          custom-properties.create(\n            --mdc-ripple-activated-opacity,\n            $activated-opacity\n          )\n        );\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $activated-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-selected(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n  $selected-opacity: states-opacity($color, selected);\n\n  &--selected {\n    @include states-background-selector($ripple-target) {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(\n          opacity,\n          custom-properties.create(\n            --mdc-ripple-selected-opacity,\n            $selected-opacity\n          )\n        );\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $selected-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n@mixin states-interactions_(\n  $color,\n  $has-nested-focusable-element,\n  $opacity-modifier: 0,\n  $query: feature-targeting.all(),\n  $ripple-target: '&',\n  $opacity-map: null\n) {\n  @include target-selector($ripple-target) {\n    @include states-base-color($color, $query);\n  }\n\n  @if $opacity-map == null {\n    $opacity-map: (\n      hover: states-opacity($color, hover) + $opacity-modifier,\n      focus: states-opacity($color, focus) + $opacity-modifier,\n      press: states-opacity($color, press) + $opacity-modifier,\n    );\n  }\n\n  @include states-opacities(\n    $opacity-map,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $ripple-target: $ripple-target,\n    $query: $query\n  );\n}\n\n// Wraps content in the `ripple-target` selector if it exists.\n@mixin target-selector($ripple-target: '&') {\n  @if $ripple-target == '&' {\n    @content;\n  } @else {\n    #{$ripple-target} {\n      @content;\n    }\n  }\n}\n\n/// Selector for hover, active and focus states.\n@mixin states-selector() {\n  #{$_hover-selector},\n  #{$_focus-selector},\n  #{$_active-selector} {\n    @content;\n  }\n}\n\n@mixin hover() {\n  #{$_hover-selector} {\n    @content;\n  }\n}\n\n// Selector for focus state. Using ':not(.mdc-ripple-upgraded)' to continue\n// applying focus styles on JS-disabled components, and control focus\n// on JS-enabled components with '.mdc-ripple-upgraded--background-focused'.\n@mixin focus() {\n  #{$_focus-selector} {\n    @content;\n  }\n}\n\n// Selector for active state. Using `:active:active` to override focus styles.\n@mixin pressed() {\n  #{$_active-selector} {\n    @content;\n  }\n}\n\n// @deprecated Use `pressed()` mixin - renamed for consistency.\n@mixin active() {\n  @include pressed() {\n    @content;\n  }\n}\n\n/// Keep the ripple (State overlay) behind the content.\n@mixin behind-content(\n  $ripple-target,\n  $content-root-selector: '&',\n  $query: feature-targeting.all()\n) {\n  // Needed for IE11. Without this, IE11 renders the state layer completely\n  // underneath the container, making it invisible.\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  #{$content-root-selector} {\n    @include feature-targeting.targets($feat-structure) {\n      z-index: 0;\n    }\n  }\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(\n        z-index,\n        custom-properties.create(--mdc-ripple-z-index, -1)\n      );\n    }\n  }\n}\n\n@function states-opacity($color, $state) {\n  $color-value: theme-color.prop-value($color);\n  $opacity-map: if(\n    theme-color.tone($color-value) == 'light',\n    $light-ink-opacities,\n    $dark-ink-opacities\n  );\n\n  @if not map.has-key($opacity-map, $state) {\n    @error \"Invalid state: '#{$state}'. Choose one of: #{map.keys($opacity-map)}\";\n  }\n\n  @return map.get($opacity-map, $state);\n}\n\n@mixin states-background-selector($ripple-target) {\n  #{$ripple-target}::before {\n    @content;\n  }\n}\n","//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Selector '.mdc-*' should only be used in this project.\n\n@use 'sass:math';\n@use 'sass:color';\n@use 'sass:map';\n@use '@material/animation/functions' as functions2;\n@use '@material/animation/variables' as variables2;\n@use '@material/base/mixins' as base-mixins;\n@use '@material/theme/custom-properties';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/rtl/rtl';\n@use '@material/theme/theme';\n@use './ripple-theme';\n\n@mixin core-styles($query: feature-targeting.all()) {\n  @include static-styles($query: $query);\n\n  .mdc-ripple-surface {\n    @include ripple-theme.states($query: $query);\n  }\n}\n\n@mixin static-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-ripple-surface {\n    @include surface($query: $query);\n    @include radius-bounded($query: $query);\n    @include surface-styles($query: $query);\n  }\n\n  .mdc-ripple-surface[data-mdc-ripple-is-unbounded],\n  .mdc-ripple-upgraded--unbounded {\n    @include radius-unbounded($query: $query);\n    @include unbounded-styles($query: $query);\n  }\n}\n\n/// Sets all states (including hover, focus, press, activated and selected) with\n/// given color as base color.\n///\n/// This mixin is for internal use only. Use `ripple-theme.states($color)` mixin\n/// to set interactive states (hover, focus & press) color.\n///\n/// @param {Color|String} $color - Target base color. Can be valid CSS color or\n///     a color string literal (i.e., `primary`, `secondary`, etc).\n@mixin states-for-color($color, $query: feature-targeting.all()) {\n  @include ripple-theme.states($color, $query: $query);\n  @include ripple-theme.states-activated($color, $query: $query);\n  @include ripple-theme.states-selected($color, $query: $query);\n}\n\n@mixin surface-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    position: relative;\n    outline: none;\n    overflow: hidden;\n  }\n}\n\n@mixin unbounded-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    overflow: visible;\n  }\n}\n\n@mixin common($query: feature-targeting.all()) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n\n  // Ensure that styles needed by any component using MDC Ripple are emitted, but only once.\n  // (Every component using MDC Ripple imports these mixins, but doesn't necessarily import\n  // mdc-ripple.scss.)\n  @include feature-targeting.targets($feat-animation) {\n    @include base-mixins.emit-once('mdc-ripple/common/animation') {\n      @include keyframes_;\n    }\n  }\n}\n\n@mixin surface(\n  $query: feature-targeting.all(),\n  $ripple-target: '&',\n  $include-will-change: true // TODO(b/151931961): Remove once resolved\n) {\n  $feat-animation: feature-targeting.create-target($query, animation);\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    --mdc-ripple-fg-size: 0;\n    --mdc-ripple-left: 0;\n    --mdc-ripple-top: 0;\n    --mdc-ripple-fg-scale: 1;\n    --mdc-ripple-fg-translate-end: 0;\n    --mdc-ripple-fg-translate-start: 0;\n\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    // TODO(b/151931961): Remove the following block once resolved\n    @if $include-will-change {\n      will-change: transform, opacity;\n    }\n  }\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting.targets($feat-structure) {\n      position: absolute;\n      border-radius: 50%;\n      opacity: 0;\n      pointer-events: none;\n      content: '';\n    }\n  }\n\n  #{$ripple-target}::before {\n    @include feature-targeting.targets($feat-animation) {\n      // Also transition background-color to avoid unnatural color flashes when toggling activated/selected state\n      transition: opacity ripple-theme.$states-wash-duration linear,\n        background-color ripple-theme.$states-wash-duration linear;\n    }\n\n    @include feature-targeting.targets($feat-structure) {\n      // Ensure that the ripple wash for hover/focus states is displayed on top of positioned child elements\n      @include theme.property(\n        z-index,\n        custom-properties.create(--mdc-ripple-z-index, 1)\n      );\n    }\n  }\n\n  #{$ripple-target}::after {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(\n        z-index,\n        custom-properties.create(--mdc-ripple-z-index, 0)\n      );\n    }\n  }\n\n  // Common styles for upgraded surfaces (some of these depend on custom properties set via JS or other mixins)\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before {\n      @include feature-targeting.targets($feat-structure) {\n        transform: scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting.targets($feat-structure) {\n        top: 0;\n        @include rtl.ignore-next-line();\n        left: 0;\n        transform: scale(0);\n        transform-origin: center center;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--unbounded {\n    #{$ripple-target}::after {\n      @include feature-targeting.targets($feat-structure) {\n        top: var(--mdc-ripple-top, 0);\n        @include rtl.ignore-next-line();\n        left: var(--mdc-ripple-left, 0);\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-activation {\n    #{$ripple-target}::after {\n      @include feature-targeting.targets($feat-animation) {\n        animation: mdc-ripple-fg-radius-in ripple-theme.$translate-duration\n            forwards,\n          mdc-ripple-fg-opacity-in ripple-theme.$fade-in-duration forwards;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-deactivation {\n    #{$ripple-target}::after {\n      @include feature-targeting.targets($feat-animation) {\n        animation: mdc-ripple-fg-opacity-out ripple-theme.$fade-out-duration;\n      }\n\n      @include feature-targeting.targets($feat-structure) {\n        // Retain transform from mdc-ripple-fg-radius-in activation\n        transform: translate(var(--mdc-ripple-fg-translate-end, 0))\n          scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n  }\n}\n\n@mixin radius-bounded(\n  $radius: 100%,\n  $query: feature-targeting.all(),\n  $ripple-target: '&'\n) {\n  $feat-struture: feature-targeting.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting.targets($feat-struture) {\n      top: calc(50% - #{$radius});\n      @include rtl.ignore-next-line();\n      left: calc(50% - #{$radius});\n      width: $radius * 2;\n      height: $radius * 2;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::after {\n      @include feature-targeting.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin radius-unbounded(\n  $radius: 100%,\n  $query: feature-targeting.all(),\n  $ripple-target: '&'\n) {\n  $feat-struture: feature-targeting.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting.targets($feat-struture) {\n      top: calc(50% - #{math.div($radius, 2)});\n      @include rtl.ignore-next-line();\n      left: calc(50% - #{math.div($radius, 2)});\n      width: $radius;\n      height: $radius;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before,\n    #{$ripple-target}::after {\n      @include feature-targeting.targets($feat-struture) {\n        top: var(--mdc-ripple-top, calc(50% - #{math.div($radius, 2)}));\n        @include rtl.ignore-next-line();\n        left: var(--mdc-ripple-left, calc(50% - #{math.div($radius, 2)}));\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n// Common styles for a ripple target element.\n// Used for components which have an inner ripple target element.\n@mixin target-common($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    // Necessary for clicks on other inner elements (e.g. close icon in chip)\n    // to go through.\n    pointer-events: none;\n  }\n}\n\n@mixin keyframes_ {\n  @keyframes mdc-ripple-fg-radius-in {\n    from {\n      animation-timing-function: variables2.$standard-curve-timing-function;\n      // NOTE: For these keyframes, we do not need custom property fallbacks because they are only\n      // used in conjunction with `.mdc-ripple-upgraded`. Since MDCRippleFoundation checks to ensure\n      // that custom properties are supported within the browser before adding this class, we can\n      // safely use them without a fallback.\n      transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n    }\n\n    to {\n      transform: translate(var(--mdc-ripple-fg-translate-end, 0))\n        scale(var(--mdc-ripple-fg-scale, 1));\n    }\n  }\n\n  @keyframes mdc-ripple-fg-opacity-in {\n    from {\n      animation-timing-function: linear;\n      opacity: 0;\n    }\n\n    to {\n      opacity: var(--mdc-ripple-fg-opacity, 0);\n    }\n  }\n\n  @keyframes mdc-ripple-fg-opacity-out {\n    from {\n      animation-timing-function: linear;\n      opacity: var(--mdc-ripple-fg-opacity, 0);\n    }\n\n    to {\n      opacity: 0;\n    }\n  }\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use '@material/animation/animation';\n@use '@material/feature-targeting/feature-targeting';\n@use './chip-set-theme';\n\n// stylelint-disable selector-class-pattern -- MDC internal usage.\n\n@mixin core-styles($query: feature-targeting.all()) {\n  @include _static-styles($query);\n  @include _theme-styles($query);\n}\n\n@mixin _static-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  $feat-animation: feature-targeting.create-target($query, animation);\n\n  .mdc-evolution-chip-set {\n    @include feature-targeting.targets($feat-structure) {\n      display: flex;\n    }\n  }\n\n  .mdc-evolution-chip-set:focus {\n    @include feature-targeting.targets($feat-structure) {\n      outline: none;\n    }\n  }\n\n  .mdc-evolution-chip-set__chips {\n    @include feature-targeting.targets($feat-structure) {\n      display: flex;\n      flex-flow: wrap;\n      min-width: 0;\n    }\n  }\n\n  .mdc-evolution-chip-set--overflow .mdc-evolution-chip-set__chips {\n    @include feature-targeting.targets($feat-structure) {\n      flex-flow: nowrap;\n    }\n  }\n}\n\n@mixin _theme-styles($query: feature-targeting.all()) {\n  .mdc-evolution-chip-set {\n    @include chip-set-theme.horizontal-space-between-chips(\n      chip-set-theme.$space-between-chips,\n      $query\n    );\n\n    @include chip-set-theme.vertical-space-between-chips(\n      chip-set-theme.$space-between-chips,\n      $query\n    );\n  }\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:math';\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/rtl/rtl';\n\n// stylelint-disable selector-class-pattern -- MDC internal usage.\n\n$space-between-chips: 8px;\n\n///\n/// Sets the horiontal space between the chips in the chip set.\n/// @param {Number} $space - The horizontal space between the chips.\n///\n@mixin horizontal-space-between-chips($space, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  ///\n  /// We should use the column-gap property when our browser matrix allows.\n  ///\n\n  .mdc-evolution-chip-set__chips {\n    @include feature-targeting.targets($feat-structure) {\n      // Set the margin to the negative horizontal space to account for chips\n      // being inset on the leading edge.\n      @include rtl.reflexive-property(margin, -$space, 0);\n    }\n  }\n\n  .mdc-evolution-chip {\n    @include feature-targeting.targets($feat-structure) {\n      @include rtl.reflexive-property(margin, $space, 0);\n    }\n  }\n}\n\n///\n/// Sets the vertical space between the chips in the chip set.\n/// @param {Number} $space - The vertical space between the chips.\n///\n@mixin vertical-space-between-chips($space, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  ///\n  /// We should use the row-gap property when our browser matrix allows.\n  ///\n\n  .mdc-evolution-chip {\n    @include feature-targeting.targets($feat-structure) {\n      // Set top and bottom to half the vertical space since there's no\n      // well supported method for vertical wrapping gaps.\n      margin-top: math.div($space, 2);\n      margin-bottom: math.div($space, 2);\n    }\n  }\n}\n"]}